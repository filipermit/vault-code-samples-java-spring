openapi: 3.0.3
info:
  contact:
    name: Us
    url: https://piiano.com/contact-us/
  license:
    name: MPL 2.0
    url: https://www.mozilla.org/en-US/MPL/2.0/
  title: Piiano Vault REST API
  version: "1.0"
  x-text-ref-description: ../overview.md
servers:
- url: http://localhost:8123
tags:
- description: "The collection endpoints allow you to create, retrieve and update\
    \ collections."
  name: Collections
- description: The Property types and transformations endpoints allow you to list
    available types and transformations for properties.
  name: Data types and transformations
- description: "The object endpoints allow you to add, retrieve and update objects."
  name: Objects
- description: "The token endpoints allow you to tokenize, detokenize, update and\
    \ delete tokens."
  name: Tokens
- description: "The IAM (identity and access management) endpoints allow you to set\
    \ and retrieve IAM configuration, and to regenerate user API keys."
  name: IAM
- description: The config vars endpoints allow you to set and retrieve dynamic configuration
    variables.
  name: Config Vars
- description: The system endpoint allow you to retrieve system components status
    and Vault version.
  name: System
paths:
  /api/pvlt/1.0/ctl/collections:
    get:
      operationId: get-all-collections
      parameters:
      - description: "When set to `pvschema`, returns the collection in the PVSchema\
          \ format. Otherwise, returns the JSON format."
        explode: true
        in: query
        name: format
        required: false
        schema:
          default: json
          enum:
          - pvschema
          - json
          type: string
        style: form
      - description: |
          Options for the operation. Options include:
          - `show_builtins` – show built-in properties from response.
        explode: true
        in: query
        name: options
        required: false
        schema:
          items:
            enum:
            - show_builtins
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/models.Collection'
                type: array
            application/pvschema:
              schema:
                type: string
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              example:
                error_code: PV1004
                message: The collection is not found.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The requested resource is not found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: List collections
      tags:
      - Collections
      x-text-ref-description: ./control/GetAllCollections.md
      x-docs-sidebar-precedence: 1
      x-accepts: application/json
    post:
      operationId: add-collection
      parameters:
      - description: "When set to `pvschema`, returns the collection in the PVSchema\
          \ format. Otherwise, returns the JSON format."
        explode: true
        in: query
        name: format
        required: false
        schema:
          default: json
          enum:
          - pvschema
          - json
          type: string
        style: form
      - description: |
          Options for the operation. Options include:
          - `show_builtins` – show built-in properties from response.
        explode: true
        in: query
        name: options
        required: false
        schema:
          items:
            enum:
            - show_builtins
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.Collection'
          application/pvschema:
            schema:
              type: string
        description: Details of the collection including its properties.
        required: true
        x-originalParamName: collection
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.Collection'
            application/pvschema:
              schema:
                type: string
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              example:
                error_code: PV1004
                message: The collection is not found.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The requested resource is not found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Add collection
      tags:
      - Collections
      x-text-ref-description: ./control/AddCollection.md
      x-docs-sidebar-precedence: 3
      x-content-type: application/json
      x-accepts: application/json
  /api/pvlt/1.0/ctl/collections/{collection}:
    delete:
      operationId: delete-collection
      parameters:
      - description: The name of the collection.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
        style: simple
      responses:
        "200":
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection is not found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Delete collection
      tags:
      - Collections
      x-text-ref-description: ./control/DeleteCollection.md
      x-docs-sidebar-precedence: 5
      x-accepts: application/json
    get:
      operationId: get-collection
      parameters:
      - description: The name of the collection.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
        style: simple
      - description: "When set to `pvschema`, returns the collection in the PVSchema\
          \ format. Otherwise, returns the JSON format."
        explode: true
        in: query
        name: format
        required: false
        schema:
          default: json
          enum:
          - pvschema
          - json
          type: string
        style: form
      - description: |
          Options for the operation. Options include:
          - `show_builtins` – show built-in properties from response.
        explode: true
        in: query
        name: options
        required: false
        schema:
          items:
            enum:
            - show_builtins
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.Collection'
            application/pvschema:
              schema:
                type: string
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection isn't found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Get collection details
      tags:
      - Collections
      x-text-ref-description: ./control/GetCollection.md
      x-docs-sidebar-precedence: 2
      x-accepts: application/json
    patch:
      operationId: update-collection
      parameters:
      - description: The name of the collection to import the properties to.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: "When set to `pvschema`, returns the collection in the PVSchema\
          \ format. Otherwise, returns the JSON format."
        explode: true
        in: query
        name: format
        required: false
        schema:
          default: json
          enum:
          - pvschema
          - json
          type: string
        style: form
      - description: |
          Options for the operation. Options include:
          - `show_builtins` – show built-in properties from response.
        explode: true
        in: query
        name: options
        required: false
        schema:
          items:
            enum:
            - show_builtins
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.Collection'
          application/pvschema:
            schema:
              type: string
        description: Details of the collection including its properties.
        required: true
        x-originalParamName: collectionChanges
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.Collection'
            application/pvschema:
              schema:
                type: string
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection isn't found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "501":
          content:
            application/json:
              example:
                error_code: PV2001
                message: This operation is not implemented.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Not implemented.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Update collection details
      tags:
      - Collections
      x-text-ref-description: ./control/UpdateCollection.md
      x-docs-sidebar-precedence: 4
      x-content-type: application/json
      x-accepts: application/json
  /api/pvlt/1.0/ctl/collections/{collection}/properties:
    get:
      operationId: list-collection-properties
      parameters:
      - description: The name of the collection containing the properties.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: "Options for the operation. Options include: \n- `show_builtins`\
          \ – show built-in properties from response.\n"
        explode: true
        in: query
        name: options
        required: false
        schema:
          items:
            enum:
            - show_builtins
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/models.Property'
                type: array
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection isn't found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: List collection properties
      tags:
      - Collections
      x-text-ref-description: ./control/ListProperties.md
      x-docs-sidebar-precedence: 2
      x-accepts: application/json
  /api/pvlt/1.0/ctl/collections/{collection}/properties/{property}:
    delete:
      operationId: delete-collection-property
      parameters:
      - description: The name of the collection containing the property.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the property.
        explode: false
        in: path
        name: property
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection or property wasn't found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Delete collection property
      tags:
      - Collections
      x-text-ref-description: ./control/DeleteProperty.md
      x-docs-sidebar-precedence: 6
      x-accepts: application/json
    get:
      operationId: get-collection-property
      parameters:
      - description: The ID of the collection containing the property.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the property.
        explode: false
        in: path
        name: property
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.Property'
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection or property wasn't found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Get collection property
      tags:
      - Collections
      x-text-ref-description: ./control/GetProperty.md
      x-docs-sidebar-precedence: 4
      x-accepts: application/json
    patch:
      operationId: update-collection-property
      parameters:
      - description: The name of the collection containing the property.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the property.
        explode: false
        in: path
        name: property
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.Property'
        description: property info
        required: true
        x-originalParamName: property
      responses:
        "200":
          description: Property updated successfully
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection or property wasn't found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "501":
          content:
            application/json:
              example:
                error_code: PV2001
                message: This operation is not implemented.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Not implemented.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Update collection property
      tags:
      - Collections
      x-text-ref-description: ./control/UpdateProperty.md
      x-docs-sidebar-precedence: 5
      x-content-type: application/json
      x-accepts: application/json
    post:
      operationId: add-collection-property
      parameters:
      - description: The name of the collection to add the property to.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the property to add.
        explode: false
        in: path
        name: property
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.Property'
        description: Details of the property.
        required: true
        x-originalParamName: property
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.Property'
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection isn't found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Add collection property
      tags:
      - Collections
      x-text-ref-description: ./control/AddProperty.md
      x-docs-sidebar-precedence: 3
      x-content-type: application/json
      x-accepts: application/json
  /api/pvlt/1.0/ctl/iam/conf:
    get:
      operationId: get-iam-conf
      responses:
        "200":
          content:
            application/toml:
              schema:
                $ref: '#/components/schemas/auth.Config'
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              example:
                error_code: PV1004
                message: The collection is not found.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The requested resource is not found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Get IAM configuration
      tags:
      - IAM
      x-text-ref-description: ./control/GetIAMConf.md
      x-accepts: application/json
    post:
      operationId: set-iam-conf
      requestBody:
        content:
          application/toml:
            schema:
              $ref: '#/components/schemas/auth.Config'
        description: IAM configuration in TOML format.
        required: true
        x-originalParamName: auth_config
      responses:
        "200":
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              example:
                error_code: PV1004
                message: The collection is not found.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The requested resource is not found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Set IAM configuration
      tags:
      - IAM
      x-text-ref-description: ./control/SetIAMConf.md
      x-content-type: application/toml
      x-accepts: application/json
  /api/pvlt/1.0/ctl/iam/user/regen:
    post:
      operationId: regenerate-user-api-key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.UserName'
        description: The name of the user to regenerate API key for.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.APIKey'
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The user is not found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Regenerate user API key
      tags:
      - IAM
      x-text-ref-description: ./control/RegenerateUserAPIKey.md
      x-content-type: application/json
      x-accepts: application/json
  /api/pvlt/1.0/ctl/info/health:
    get:
      operationId: control-health
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.Health'
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              example:
                error_code: PV1004
                message: The collection is not found.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The requested resource is not found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      summary: Get control service status
      tags:
      - System
      x-text-ref-description: ./control/Health.md
      x-docs-sidebar-precedence: 9
      x-accepts: application/json
  /api/pvlt/1.0/ctl/transformations:
    get:
      operationId: list-transformations
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/models.TransformationDoc'
                type: array
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              example:
                error_code: PV1004
                message: The collection is not found.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The requested resource is not found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: List transformations
      tags:
      - Data types and transformations
      x-text-ref-description: ./control/ListTransformations.md
      x-docs-sidebar-precedence: 7
      x-accepts: application/json
  /api/pvlt/1.0/ctl/types:
    get:
      operationId: list-property-types
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/piitype.PIIType'
                type: array
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              example:
                error_code: PV1004
                message: The collection is not found.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The requested resource is not found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: List property types
      tags:
      - Data types and transformations
      x-text-ref-description: ./control/ListPropertyTypes.md
      x-docs-sidebar-precedence: 8
      x-accepts: application/json
  /api/pvlt/1.0/ctl/info/cluster:
    get:
      operationId: get-cluster-info
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.AllGenerations'
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              example:
                error_code: PV1004
                message: The collection is not found.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The requested resource is not found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Get cluster information
      tags:
      - System
      x-text-ref-description: ./control/GetClusterInfo.md
      x-docs-sidebar-precedence: 10
      x-accepts: application/json
  /api/pvlt/1.0/data/collections/{collection}/objects:
    delete:
      operationId: delete-object-by-id
      parameters:
      - description: The name of the collection containing the object.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the object.
        explode: true
        in: query
        name: id
        required: true
        schema:
          items:
            type: string
          maxLength: 1
          minItems: 1
          type: array
        style: form
      - description: "Options for the operation. Options include:\n- `hard_delete`\
          \ – permanently delete the objects.\n- `deleted` – remove only deleted objects,\
          \ requires `hard_delete` to be specified.\n"
        explode: true
        in: query
        name: options
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: An ad-hoc reason for accessing the Vault data.
        explode: true
        in: query
        name: adhoc_reason
        required: false
        schema:
          type: string
        style: form
      - description: Details of the reason for requesting the property. The default
          is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON
          is false.
        explode: true
        in: query
        name: reason
        required: true
        schema:
          enum:
          - AppFunctionality
          - Analytics
          - Notifications
          - Marketing
          - ThirdPartyMarketing
          - FraudPreventionSecurityAndCompliance
          - AccountManagement
          - Maintenance
          - DataSubjectRequest
          - Other
          type: string
        style: form
      - description: Reloads the cache before the action.
        explode: true
        in: query
        name: reload_cache
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection or object is not found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Delete object
      tags:
      - Objects
      x-text-ref-description: ./data/DeleteObjectByID.md
      x-docs-sidebar-precedence: 6
      x-accepts: application/json
    get:
      operationId: get-objects
      parameters:
      - description: The name of the collection containing the objects.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: An ad-hoc reason for accessing the Vault data.
        explode: true
        in: query
        name: adhoc_reason
        required: false
        schema:
          type: string
        style: form
      - description: Details of the reason for requesting the property. The default
          is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON
          is false.
        explode: true
        in: query
        name: reason
        required: true
        schema:
          enum:
          - AppFunctionality
          - Analytics
          - Notifications
          - Marketing
          - ThirdPartyMarketing
          - FraudPreventionSecurityAndCompliance
          - AccountManagement
          - Maintenance
          - DataSubjectRequest
          - Other
          type: string
        style: form
      - description: Reloads the cache before the action.
        explode: true
        in: query
        name: reload_cache
        required: false
        schema:
          type: boolean
        style: form
      - description: "The maximum number of items to return in this request. If not\
          \ specified, the default value is used. The default value is the value specified\
          \ in the environment variable `PVAULT_SERVICE_DEFAULT_PAGE_SIZE`. The value\
          \ must not exceed the value specified in the environment variable `PVAULT_SERVICE_DEFAULT_PAGE_SIZE`"
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          type: integer
        style: form
      - description: "The cursor represents the state of consecutive queries for the\
          \ same request parameters. In the first call, the cursor may be omitted\
          \ or specified as an empty string. In consecutive calls, it should be set\
          \ to the value of the cursor field of the models.ObjectFieldsPage returned\
          \ by the previous call. Note: when the `id` is specified, paging is not\
          \ supported. In this case, if the number of `id` values specified exceeds\
          \ the maximum page size, the method returns 400 (BAD REQUEST)."
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: "A comma-separated list of object IDs. If not provided, all objects\
          \ are returned. The number of IDs provided cannot exceed the default page\
          \ size."
        explode: true
        in: query
        name: id
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: "Options for the operation. Options include:\n- `unsafe` – fetch\
          \ all the properties, cannot be specified with `props`.\n- `show_builtins`\
          \ – show built-in properties, can only be specified with `unsafe`.\n- `deleted`\
          \ – get only deleted objects.\n"
        explode: true
        in: query
        name: options
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: "The list of property names and transformations. To include multiple\
          \ names and transformation bindings, provide a comma-separated list. For\
          \ example, `props=first_name,last_name`. If the `unsafe` option is used,\
          \ must be empty."
        explode: true
        in: query
        name: props
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.ObjectFieldsPage'
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: "The collection, properties or object isn't found."
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: List objects
      tags:
      - Objects
      x-text-ref-description: ./data/GetObjects.md
      x-docs-sidebar-precedence: 1
      x-accepts: application/json
    patch:
      operationId: update-object-by-id
      parameters:
      - description: The name of the collection containing the object.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the object.
        explode: true
        in: query
        name: id
        required: true
        schema:
          items:
            format: uuid
            type: string
          maxItems: 1
          minItems: 1
          type: array
        style: form
      - description: An ad-hoc reason for accessing the Vault data.
        explode: true
        in: query
        name: adhoc_reason
        required: false
        schema:
          type: string
        style: form
      - description: Details of the reason for requesting the property. The default
          is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON
          is false.
        explode: true
        in: query
        name: reason
        required: true
        schema:
          enum:
          - AppFunctionality
          - Analytics
          - Notifications
          - Marketing
          - ThirdPartyMarketing
          - FraudPreventionSecurityAndCompliance
          - AccountManagement
          - Maintenance
          - DataSubjectRequest
          - Other
          type: string
        style: form
      - description: Reloads the cache before the action.
        explode: true
        in: query
        name: reload_cache
        required: false
        schema:
          type: boolean
        style: form
      - description: "Object time to live (TTL) in seconds. If not set, the default\
          \ TTL is used. See the `PVAULT_TTL_ASSOCIATED_OBJECTS` and `PVAULT_TTL_UNASSOCIATED_OBJECTS`\
          \ time to live environment variables."
        explode: true
        in: query
        name: ttl
        required: false
        schema:
          pattern: "^[0-9]*$"
          type: string
        style: form
      - description: |
          Options for the operation. Options include:
          - `deleted` – update only deleted objects.
        explode: true
        in: query
        name: options
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.Object'
        description: The object properties to update.
        required: true
        x-originalParamName: object
      responses:
        "200":
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: "The collection, properties, or object is not found."
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Update object
      tags:
      - Objects
      x-text-ref-description: ./data/UpdateObjectByID.md
      x-docs-sidebar-precedence: 5
      x-content-type: application/json
      x-accepts: application/json
    post:
      operationId: add-object
      parameters:
      - description: The name of the collection to add the object to.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: An ad-hoc reason for accessing the Vault data.
        explode: true
        in: query
        name: adhoc_reason
        required: false
        schema:
          type: string
        style: form
      - description: Details of the reason for requesting the property. The default
          is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON
          is false.
        explode: true
        in: query
        name: reason
        required: true
        schema:
          enum:
          - AppFunctionality
          - Analytics
          - Notifications
          - Marketing
          - ThirdPartyMarketing
          - FraudPreventionSecurityAndCompliance
          - AccountManagement
          - Maintenance
          - DataSubjectRequest
          - Other
          type: string
        style: form
      - description: Reloads the cache before the action.
        explode: true
        in: query
        name: reload_cache
        required: false
        schema:
          type: boolean
        style: form
      - description: "Object time to live (TTL) in seconds, cannot be set to 0. If\
          \ not set, the default TTL is used. See the `PVAULT_TTL_ASSOCIATED_OBJECTS`\
          \ and `PVAULT_TTL_UNASSOCIATED_OBJECTS` time to live environment variables."
        explode: true
        in: query
        name: ttl
        required: false
        schema:
          pattern: "^[0-9]*$"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.Object'
        description: The object details.
        required: true
        x-originalParamName: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.ObjectID'
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection or properties isn't found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Add object
      tags:
      - Objects
      x-text-ref-description: ./data/AddObject.md
      x-docs-sidebar-precedence: 4
      x-content-type: application/json
      x-accepts: application/json
  /api/pvlt/1.0/data/collections/{collection}/properties/{property}:
    get:
      operationId: get-objects-property
      parameters:
      - description: An ad-hoc reason for accessing the Vault data.
        explode: true
        in: query
        name: adhoc_reason
        required: false
        schema:
          type: string
        style: form
      - description: Details of the reason for requesting the property. The default
          is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON
          is false.
        explode: true
        in: query
        name: reason
        required: true
        schema:
          enum:
          - AppFunctionality
          - Analytics
          - Notifications
          - Marketing
          - ThirdPartyMarketing
          - FraudPreventionSecurityAndCompliance
          - AccountManagement
          - Maintenance
          - DataSubjectRequest
          - Other
          type: string
        style: form
      - description: Reloads the cache before the action.
        explode: true
        in: query
        name: reload_cache
        required: false
        schema:
          type: boolean
        style: form
      - description: "The maximum number of items to return in this request. If not\
          \ specified, the default value is used. The default value is the value specified\
          \ in the environment variable `PVAULT_SERVICE_DEFAULT_PAGE_SIZE`. The value\
          \ must not exceed the value specified in the environment variable `PVAULT_SERVICE_DEFAULT_PAGE_SIZE`"
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          type: integer
        style: form
      - description: "The cursor represents the state of consecutive queries for the\
          \ same request parameters. In the first call, the cursor may be omitted\
          \ or specified as an empty string. In consecutive calls, it should be set\
          \ to the value of the cursor field of the models.ObjectFieldsPage returned\
          \ by the previous call. Note: when the `id` is specified, paging is not\
          \ supported. In this case, if the number of `id` values specified exceeds\
          \ the maximum page size, the method returns 400 (BAD REQUEST)."
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The name of the collection containing the objects.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: The required property.
        explode: false
        in: path
        name: property
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Options for the operation. Options include:
          - `deleted` – get only deleted objects.
        explode: true
        in: query
        name: options
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The ID of the object. If not given - return all objects
        explode: true
        in: query
        name: id
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.ObjectFieldsPage'
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: "The collection, properties or object isn't found."
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Get objects property
      tags:
      - Objects
      x-text-ref-description: ./data/GetObjectsProperty.md
      x-docs-sidebar-precedence: 2
      x-accepts: application/json
  /api/pvlt/1.0/data/collections/{collection}/query/objects:
    post:
      operationId: search-objects
      parameters:
      - description: The name of the collection containing the objects.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: An ad-hoc reason for accessing the Vault data.
        explode: true
        in: query
        name: adhoc_reason
        required: false
        schema:
          type: string
        style: form
      - description: Details of the reason for requesting the property. The default
          is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON
          is false.
        explode: true
        in: query
        name: reason
        required: true
        schema:
          enum:
          - AppFunctionality
          - Analytics
          - Notifications
          - Marketing
          - ThirdPartyMarketing
          - FraudPreventionSecurityAndCompliance
          - AccountManagement
          - Maintenance
          - DataSubjectRequest
          - Other
          type: string
        style: form
      - description: Reloads the cache before the action.
        explode: true
        in: query
        name: reload_cache
        required: false
        schema:
          type: boolean
        style: form
      - description: "The maximum number of items to return in this request. If not\
          \ specified, the default value is used. The default value is the value specified\
          \ in the environment variable `PVAULT_SERVICE_DEFAULT_PAGE_SIZE`. The value\
          \ must not exceed the value specified in the environment variable `PVAULT_SERVICE_DEFAULT_PAGE_SIZE`"
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          type: integer
        style: form
      - description: "The cursor represents the state of consecutive queries for the\
          \ same request parameters. In the first call, the cursor may be omitted\
          \ or specified as an empty string. In consecutive calls, it should be set\
          \ to the value of the cursor field of the models.ObjectFieldsPage returned\
          \ by the previous call. Note: when the `id` is specified, paging is not\
          \ supported. In this case, if the number of `id` values specified exceeds\
          \ the maximum page size, the method returns 400 (BAD REQUEST)."
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: "Options for the operation. Options include:\n- `unsafe` – fetch\
          \ all the properties, cannot be specified with `props`.\n- `show_builtins`\
          \ – show built-in properties, can only be specified with `unsafe`.\n- `deleted`\
          \ – get only deleted objects.\n"
        explode: true
        in: query
        name: options
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: "The list of property names and transformations. To include multiple\
          \ names and transformation bindings, provide a comma-separated list. For\
          \ example, `props=first_name,last_name`. If the `unsafe` option is used,\
          \ must be empty."
        explode: true
        in: query
        name: props
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.Query'
        description: "The query.\nThis is a JSON object consisting of property keys\
          \ and match values.\nFor example:\n```json\n{\n  \"match\": {\n    \"first_name\"\
          : \"John\",\n    \"last_name\": \"Doe\"\n  }\n}\n```\nis the equivalent\
          \ to:\n```sql\nwhere first_name = \"John\" AND last_name=\"Doe\"\n```\n"
        required: true
        x-originalParamName: query
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.ObjectFieldsPage'
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection or properties isn't found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Search objects
      tags:
      - Objects
      x-text-ref-description: ./data/SearchObjects.md
      x-docs-sidebar-precedence: 3
      x-content-type: application/json
      x-accepts: application/json
  /api/pvlt/1.0/data/collections/{collection}/query/tokens:
    post:
      operationId: search-tokens
      parameters:
      - description: |
          Options for the operation. Options include:
          - `deleted` – get only deleted tokens.
        explode: true
        in: query
        name: options
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The name of the collection containing the object.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: An ad-hoc reason for accessing the Vault data.
        explode: true
        in: query
        name: adhoc_reason
        required: false
        schema:
          type: string
        style: form
      - description: Details of the reason for requesting the property. The default
          is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON
          is false.
        explode: true
        in: query
        name: reason
        required: true
        schema:
          enum:
          - AppFunctionality
          - Analytics
          - Notifications
          - Marketing
          - ThirdPartyMarketing
          - FraudPreventionSecurityAndCompliance
          - AccountManagement
          - Maintenance
          - DataSubjectRequest
          - Other
          type: string
        style: form
      - description: Reloads the cache before the action.
        explode: true
        in: query
        name: reload_cache
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.QueryToken'
        description: The query. This is a JSON object consisting of query filters.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/models.TokenMetadata'
                type: array
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: "The collection, token, or referenced object or property was\
            \ not found."
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Search tokens
      tags:
      - Tokens
      x-text-ref-description: ./data/SearchTokens.md
      x-docs-sidebar-precedence: 6
      x-content-type: application/json
      x-accepts: application/json
  /api/pvlt/1.0/data/collections/{collection}/tokens:
    delete:
      operationId: delete-tokens
      parameters:
      - description: Comma-separated list of object IDs.
        explode: true
        in: query
        name: object_id
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Comma-separated list of tags.
        explode: true
        in: query
        name: tag
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Comma-separated list of token IDs.
        explode: true
        in: query
        name: token_id
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: "Options for the operation. Options include:\n- `hard_delete`\
          \ – permanently delete the tokens.\n- `deleted` – remove only deleted tokens,\
          \ requires `hard_delete` to be specified.\n"
        explode: true
        in: query
        name: options
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The name of the collection containing the object.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: An ad-hoc reason for accessing the Vault data.
        explode: true
        in: query
        name: adhoc_reason
        required: false
        schema:
          type: string
        style: form
      - description: Details of the reason for requesting the property. The default
          is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON
          is false.
        explode: true
        in: query
        name: reason
        required: true
        schema:
          enum:
          - AppFunctionality
          - Analytics
          - Notifications
          - Marketing
          - ThirdPartyMarketing
          - FraudPreventionSecurityAndCompliance
          - AccountManagement
          - Maintenance
          - DataSubjectRequest
          - Other
          type: string
        style: form
      - description: Reloads the cache before the action.
        explode: true
        in: query
        name: reload_cache
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection or token isn't found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Delete tokens
      tags:
      - Tokens
      x-text-ref-description: ./data/DeleteTokens.md
      x-docs-sidebar-precedence: 3
      x-accepts: application/json
    get:
      operationId: detokenize
      parameters:
      - description: Comma-separated list of object IDs.
        explode: true
        in: query
        name: object_id
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Comma-separated list of options.
        explode: true
        in: query
        name: options
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Comma-separated list of tags.
        explode: true
        in: query
        name: tag
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Comma-separated list of token IDs.
        explode: true
        in: query
        name: token_id
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The name of the collection containing the object.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: An ad-hoc reason for accessing the Vault data.
        explode: true
        in: query
        name: adhoc_reason
        required: false
        schema:
          type: string
        style: form
      - description: Details of the reason for requesting the property. The default
          is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON
          is false.
        explode: true
        in: query
        name: reason
        required: true
        schema:
          enum:
          - AppFunctionality
          - Analytics
          - Notifications
          - Marketing
          - ThirdPartyMarketing
          - FraudPreventionSecurityAndCompliance
          - AccountManagement
          - Maintenance
          - DataSubjectRequest
          - Other
          type: string
        style: form
      - description: Reloads the cache before the action.
        explode: true
        in: query
        name: reload_cache
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/models.DetokenizedToken'
                type: array
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: "The collection, properties, referenced objects or token isn't\
            \ found."
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Detokenize tokens
      tags:
      - Tokens
      x-text-ref-description: ./data/Detokenize.md
      x-docs-sidebar-precedence: 2
      x-accepts: application/json
    patch:
      operationId: update-tokens
      parameters:
      - description: "Token time to live (TTL) in seconds. If not set, the token's\
          \ expiry date is not changed."
        explode: true
        in: query
        name: ttl
        required: false
        schema:
          pattern: "^[0-9]*$"
          type: string
        style: form
      - description: Comma-separated list of object IDs.
        explode: true
        in: query
        name: object_id
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: Comma-separated list of tags.
        explode: true
        in: query
        name: tag
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Comma-separated list of token IDs.
        explode: true
        in: query
        name: token_id
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          Options for the operation. Options include:
          - `deleted` – update only deleted tokens.
        explode: true
        in: query
        name: options
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The name of the collection containing the object.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: An ad-hoc reason for accessing the Vault data.
        explode: true
        in: query
        name: adhoc_reason
        required: false
        schema:
          type: string
        style: form
      - description: Details of the reason for requesting the property. The default
          is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON
          is false.
        explode: true
        in: query
        name: reason
        required: true
        schema:
          enum:
          - AppFunctionality
          - Analytics
          - Notifications
          - Marketing
          - ThirdPartyMarketing
          - FraudPreventionSecurityAndCompliance
          - AccountManagement
          - Maintenance
          - DataSubjectRequest
          - Other
          type: string
        style: form
      - description: Reloads the cache before the action.
        explode: true
        in: query
        name: reload_cache
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.UpdateTokenRequest'
        description: Update token request details.
        required: true
        x-originalParamName: body
      responses:
        "200":
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: "The collection, token, or referenced object or property was\
            \ not found."
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Update tokens
      tags:
      - Tokens
      x-text-ref-description: ./data/UpdateTokens.md
      x-docs-sidebar-precedence: 4
      x-content-type: application/json
      x-accepts: application/json
    post:
      operationId: tokenize
      parameters:
      - description: "Token time to live (TTL) in seconds. If not set, the default\
          \ TTL is used. See the `PVAULT_TTL_TOKENS` time to live environment variable."
        explode: true
        in: query
        name: ttl
        required: false
        schema:
          pattern: "^[0-9]*$"
          type: string
        style: form
      - description: The name of the collection containing the object.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: An ad-hoc reason for accessing the Vault data.
        explode: true
        in: query
        name: adhoc_reason
        required: false
        schema:
          type: string
        style: form
      - description: Details of the reason for requesting the property. The default
          is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON
          is false.
        explode: true
        in: query
        name: reason
        required: true
        schema:
          enum:
          - AppFunctionality
          - Analytics
          - Notifications
          - Marketing
          - ThirdPartyMarketing
          - FraudPreventionSecurityAndCompliance
          - AccountManagement
          - Maintenance
          - DataSubjectRequest
          - Other
          type: string
        style: form
      - description: Reloads the cache before the action.
        explode: true
        in: query
        name: reload_cache
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.TokenizeRequest'
        description: Details of the object and property.
        required: true
        x-originalParamName: object_prop
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/models.TokenValue'
                type: array
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: "The collection, properties or referenced objects isn't found."
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Tokenize properties of an object data
      tags:
      - Tokens
      x-text-ref-description: ./data/Tokenize.md
      x-docs-sidebar-precedence: 1
      x-content-type: application/json
      x-accepts: application/json
  /api/pvlt/1.0/data/collections/{collection}/rotate/tokens:
    post:
      operationId: rotate-tokens
      parameters:
      - description: Comma-separated list of token IDs.
        explode: true
        in: query
        name: token_id
        required: true
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The name of the collection containing the object.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: An ad-hoc reason for accessing the Vault data.
        explode: true
        in: query
        name: adhoc_reason
        required: false
        schema:
          type: string
        style: form
      - description: Details of the reason for requesting the property. The default
          is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON
          is false.
        explode: true
        in: query
        name: reason
        required: true
        schema:
          enum:
          - AppFunctionality
          - Analytics
          - Notifications
          - Marketing
          - ThirdPartyMarketing
          - FraudPreventionSecurityAndCompliance
          - AccountManagement
          - Maintenance
          - DataSubjectRequest
          - Other
          type: string
        style: form
      - description: Reloads the cache before the action.
        explode: true
        in: query
        name: reload_cache
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/models.RotatedToken'
                type: array
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: "The collection, token, or referenced object or property was\
            \ not found."
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Rotate tokens
      tags:
      - Tokens
      x-text-ref-description: ./data/RotateTokens.md
      x-docs-sidebar-precedence: 5
      x-accepts: application/json
  /api/pvlt/1.0/data/info/health:
    get:
      operationId: data-health
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.Health'
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              example:
                error_code: PV1004
                message: The collection is not found.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The requested resource is not found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      summary: Get data service status
      tags:
      - System
      x-text-ref-description: ./data/Health.md
      x-docs-sidebar-precedence: 8
      x-accepts: application/json
  /api/pvlt/1.0/system/admin/keys/rotate:
    post:
      operationId: rotate-keys
      responses:
        "200":
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              example:
                error_code: PV1004
                message: The collection is not found.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The requested resource is not found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Rotate data encryption keys
      tags:
      - System
      x-text-ref-description: ./control/RotateKeysets.md
      x-accepts: application/json
  /api/pvlt/1.0/system/admin/lifecycle/gc:
    post:
      operationId: garbage-collection
      parameters:
      - description: "Filter for the GC operation. Options include: `objects_only`,`tokens_only`."
        explode: true
        in: query
        name: filter
        required: false
        schema:
          default: all
          enum:
          - objects_only
          - tokens_only
          - all
          type: string
        style: form
      - description: Runs dry run GC if set to true.
        explode: true
        in: query
        name: dry_run
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: An ad-hoc reason for accessing the Vault data.
        explode: true
        in: query
        name: adhoc_reason
        required: false
        schema:
          type: string
        style: form
      - description: Details of the reason for requesting the property. The default
          is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON
          is false.
        explode: true
        in: query
        name: reason
        required: true
        schema:
          enum:
          - AppFunctionality
          - Analytics
          - Notifications
          - Marketing
          - ThirdPartyMarketing
          - FraudPreventionSecurityAndCompliance
          - AccountManagement
          - Maintenance
          - DataSubjectRequest
          - Other
          type: string
        style: form
      - description: Reloads the cache before the action.
        explode: true
        in: query
        name: reload_cache
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/gc.DeletionCount'
                type: array
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              example:
                error_code: PV1004
                message: The collection is not found.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The requested resource is not found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Purge expired and soft deleted objects and tokens
      tags:
      - System
      x-text-ref-description: ./data/GarbageCollection.md
      x-docs-sidebar-precedence: 10
      x-accepts: application/json
  /api/pvlt/1.0/system/confvar:
    delete:
      operationId: clear-all-conf-vars
      responses:
        "200":
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              example:
                error_code: PV1004
                message: The collection is not found.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The requested resource is not found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Clear configuration variables
      tags:
      - Config Vars
      x-text-ref-description: ./control/ClearAllConfVars.md
      x-accepts: application/json
  /api/pvlt/1.0/system/confvar/{name}:
    get:
      operationId: get-conf-var
      parameters:
      - description: The name of the configuration variable.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.ConfVar'
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              example:
                error_code: PV1004
                message: The collection is not found.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The requested resource is not found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Get configuration variable
      tags:
      - Config Vars
      x-text-ref-description: ./control/GetConfVar.md
      x-accepts: application/json
    post:
      operationId: set-conf-var
      parameters:
      - description: The name of the configuration variable.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.ConfVarValue'
        description: Value of the configuration.
        required: true
        x-originalParamName: value
      responses:
        "200":
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              example:
                error_code: PV1004
                message: The collection is not found.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The requested resource is not found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Set configuration variable
      tags:
      - Config Vars
      x-text-ref-description: ./control/SetConfVar.md
      x-content-type: application/json
      x-accepts: application/json
  /api/pvlt/1.0/system/debug/error/trigger:
    post:
      operationId: trigger-error
      responses:
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "403":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "404":
          content:
            application/json:
              example:
                error_code: PV1004
                message: The collection is not found.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The requested resource is not found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Trigger an artificial error
      tags:
      - System
      x-text-ref-description: ./control/Error.md
      x-docs-sidebar-precedence: 10
      x-accepts: application/json
  /api/pvlt/1.0/system/info/configuration:
    get:
      operationId: get-configuration
      responses:
        "200":
          content:
            application/toml:
              schema:
                $ref: '#/components/schemas/config.Config'
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              example:
                error_code: PV1004
                message: The collection is not found.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The requested resource is not found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Get system configuration
      tags:
      - System
      x-text-ref-description: ./control/Configuration.md
      x-docs-sidebar-precedence: 10
      x-accepts: application/json
  /api/pvlt/1.0/system/info/license:
    get:
      operationId: get-license
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.License'
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              example:
                error_code: PV1004
                message: The collection is not found.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The requested resource is not found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Get license
      tags:
      - System
      x-text-ref-description: ./control/License.md
      x-docs-sidebar-precedence: 10
      x-accepts: application/json
  /api/pvlt/1.0/system/info/version:
    get:
      operationId: get-vault-version
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.ProductVersion'
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              example:
                error_code: PV1004
                message: The collection is not found.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The requested resource is not found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Get Vault version
      tags:
      - System
      x-text-ref-description: ./control/Version.md
      x-docs-sidebar-precedence: 10
      x-accepts: application/json
  /api/pvlt/1.0/system/info/kms:
    get:
      operationId: get-kms
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.KMSStatus'
          description: The request is successful.
        "400":
          content:
            application/json:
              example:
                error_code: PV1001
                message: The access reason is missing.
                context:
                  reason: null
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The request is invalid.
        "401":
          content:
            application/json:
              example:
                error_code: PV1005
                message: The request is unauthorized.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: Authentication credentials are incorrect or missing.
        "403":
          content:
            application/json:
              example:
                error_code: PV1007
                message: The operation is forbidden due to missing capabilities.
                context:
                  username: WebServer
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The caller doesn't have the required access rights.
        "404":
          content:
            application/json:
              example:
                error_code: PV1004
                message: The collection is not found.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The requested resource is not found.
        "500":
          content:
            application/json:
              example:
                error_code: PV1000
                message: Something went wrong
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: An error occurred on the server.
        "503":
          content:
            application/json:
              example:
                error_code: PV1009
                message: The operation timed out on the server.
                context: {}
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The service is unavailable.
      security:
      - bearerAuth: []
      summary: Get KMS status
      tags:
      - System
      x-text-ref-description: ./control/GetKMSStatus.md
      x-accepts: application/json
components:
  parameters:
    jsonOrPvSchemaFormat:
      description: "When set to `pvschema`, returns the collection in the PVSchema\
        \ format. Otherwise, returns the JSON format."
      explode: true
      in: query
      name: format
      required: false
      schema:
        default: json
        enum:
        - pvschema
        - json
        type: string
      style: form
    collection:
      description: The name of the collection.
      explode: false
      in: path
      name: collection
      required: true
      schema:
        pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
        type: string
      style: simple
    page_size:
      description: "The maximum number of items to return in this request. If not\
        \ specified, the default value is used. The default value is the value specified\
        \ in the environment variable `PVAULT_SERVICE_DEFAULT_PAGE_SIZE`. The value\
        \ must not exceed the value specified in the environment variable `PVAULT_SERVICE_DEFAULT_PAGE_SIZE`"
      explode: true
      in: query
      name: page_size
      required: false
      schema:
        type: integer
      style: form
    cursor:
      description: "The cursor represents the state of consecutive queries for the\
        \ same request parameters. In the first call, the cursor may be omitted or\
        \ specified as an empty string. In consecutive calls, it should be set to\
        \ the value of the cursor field of the models.ObjectFieldsPage returned by\
        \ the previous call. Note: when the `id` is specified, paging is not supported.\
        \ In this case, if the number of `id` values specified exceeds the maximum\
        \ page size, the method returns 400 (BAD REQUEST)."
      explode: true
      in: query
      name: cursor
      required: false
      schema:
        type: string
      style: form
    adhoc_reason:
      description: An ad-hoc reason for accessing the Vault data.
      explode: true
      in: query
      name: adhoc_reason
      required: false
      schema:
        type: string
      style: form
    reason:
      description: Details of the reason for requesting the property. The default
        is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON
        is false.
      explode: true
      in: query
      name: reason
      required: true
      schema:
        enum:
        - AppFunctionality
        - Analytics
        - Notifications
        - Marketing
        - ThirdPartyMarketing
        - FraudPreventionSecurityAndCompliance
        - AccountManagement
        - Maintenance
        - DataSubjectRequest
        - Other
        type: string
      style: form
    reload_cache:
      description: Reloads the cache before the action.
      explode: true
      in: query
      name: reload_cache
      required: false
      schema:
        type: boolean
      style: form
  responses:
    "400":
      content:
        application/json:
          example:
            error_code: PV1001
            message: The access reason is missing.
            context:
              reason: null
          schema:
            $ref: '#/components/schemas/rest.HTTPError'
      description: The request is invalid.
    "401":
      content:
        application/json:
          example:
            error_code: PV1005
            message: The request is unauthorized.
            context: {}
          schema:
            $ref: '#/components/schemas/rest.HTTPError'
      description: Authentication credentials are incorrect or missing.
    "403":
      content:
        application/json:
          example:
            error_code: PV1007
            message: The operation is forbidden due to missing capabilities.
            context:
              username: WebServer
          schema:
            $ref: '#/components/schemas/rest.HTTPError'
      description: The caller doesn't have the required access rights.
    "404":
      content:
        application/json:
          example:
            error_code: PV1004
            message: The collection is not found.
            context: {}
          schema:
            $ref: '#/components/schemas/rest.HTTPError'
      description: The requested resource is not found.
    "500":
      content:
        application/json:
          example:
            error_code: PV1000
            message: Something went wrong
            context: {}
          schema:
            $ref: '#/components/schemas/rest.HTTPError'
      description: An error occurred on the server.
    "501":
      content:
        application/json:
          example:
            error_code: PV2001
            message: This operation is not implemented.
            context: {}
          schema:
            $ref: '#/components/schemas/rest.HTTPError'
      description: Not implemented.
    "503":
      content:
        application/json:
          example:
            error_code: PV1009
            message: The operation timed out on the server.
            context: {}
          schema:
            $ref: '#/components/schemas/rest.HTTPError'
      description: The service is unavailable.
  schemas:
    models.ObjectID:
      additionalProperties: false
      example:
        _id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        _id:
          format: uuid
          type: string
      type: object
    models.UserName:
      additionalProperties: false
      properties:
        name:
          type: string
      type: object
    auth.Config:
      additionalProperties: false
      example:
        roles:
          key:
            capabilities:
            - capabilities
            - capabilities
            policies:
            - policies
            - policies
        policies:
          key:
            operations:
            - operations
            - operations
            reasons:
            - reasons
            - reasons
            policyType: policyType
            resources:
            - resources
            - resources
        users:
          key:
            role: role
            disabled: true
      properties:
        policies:
          additionalProperties:
            $ref: '#/components/schemas/auth.Policy'
          type: object
        roles:
          additionalProperties:
            $ref: '#/components/schemas/auth.Role'
          type: object
        users:
          additionalProperties:
            $ref: '#/components/schemas/auth.User'
          type: object
      type: object
    auth.Policy:
      additionalProperties: false
      example:
        operations:
        - operations
        - operations
        reasons:
        - reasons
        - reasons
        policyType: policyType
        resources:
        - resources
        - resources
      properties:
        operations:
          items:
            type: string
          type: array
        policyType:
          type: string
        reasons:
          items:
            type: string
          type: array
        resources:
          items:
            type: string
          type: array
      type: object
    auth.Role:
      additionalProperties: false
      example:
        capabilities:
        - capabilities
        - capabilities
        policies:
        - policies
        - policies
      properties:
        capabilities:
          items:
            type: string
          type: array
        policies:
          items:
            type: string
          type: array
      type: object
    auth.User:
      additionalProperties: false
      example:
        role: role
        disabled: true
      properties:
        disabled:
          type: boolean
        role:
          type: string
      type: object
    config.Config:
      additionalProperties: false
      example:
        kms:
          seed: seed
          cache_enable: true
          uri: uri
        features:
          encryption: true
          policy_enforcement: true
          mask_license: true
          api_key_hashing: true
        devmode: true
        log:
          customer_env: customer_env
          level: level
          customer_identifier: customer_identifier
          datadog_apm_enable: true
          datadog_enable: true
          datadog_source: datadog_source
        service:
          cache_refresh_interval_seconds: 1.2315135367772556
          license: license
          default_page_size: 2
          force_access_reason: true
          admin_api_key: admin_api_key
          listen_addr: listen_addr
          max_page_size: 4
          timeout_seconds: 7.386281948385884
          admin_may_read_data: true
        tls:
          key_file: key_file
          selfsigned: true
          enable: true
          cert_file: cert_file
        ttl:
          associated_objects: 1
          unassociated_objects: 6
          tokens: 1
        db:
          hostname: hostname
          password: password
          require_tls: true
          max_open_conns: 5
          port: 3
          migration:
            initial_wait_between_retries: 2
            max_retries: 7
            enable_retries: true
            max_wait_between_retries: 9
            auto_run: true
          name: name
          gc:
            batch_size: 6
            grace_period_days: 1
          max_idle_conns: 5
          user: user
          conn_max_lifetime_minutes: 0
        sentry:
          enable: true
      properties:
        db:
          $ref: '#/components/schemas/config.DB'
        devmode:
          type: boolean
        features:
          $ref: '#/components/schemas/config.Features'
        kms:
          $ref: '#/components/schemas/config.KMS'
        log:
          $ref: '#/components/schemas/config.Log'
        sentry:
          $ref: '#/components/schemas/config.Sentry'
        service:
          $ref: '#/components/schemas/config.Service'
        tls:
          $ref: '#/components/schemas/config.TLS'
        ttl:
          $ref: '#/components/schemas/config.TTL'
      type: object
    config.DB:
      additionalProperties: false
      example:
        hostname: hostname
        password: password
        require_tls: true
        max_open_conns: 5
        port: 3
        migration:
          initial_wait_between_retries: 2
          max_retries: 7
          enable_retries: true
          max_wait_between_retries: 9
          auto_run: true
        name: name
        gc:
          batch_size: 6
          grace_period_days: 1
        max_idle_conns: 5
        user: user
        conn_max_lifetime_minutes: 0
      properties:
        conn_max_lifetime_minutes:
          type: integer
        gc:
          $ref: '#/components/schemas/config.GC'
        hostname:
          type: string
        max_idle_conns:
          type: integer
        max_open_conns:
          type: integer
        migration:
          $ref: '#/components/schemas/config.Migration'
        name:
          type: string
        password:
          type: string
        port:
          type: integer
        require_tls:
          type: boolean
        user:
          type: string
      type: object
    config.Features:
      additionalProperties: false
      example:
        encryption: true
        policy_enforcement: true
        mask_license: true
        api_key_hashing: true
      properties:
        api_key_hashing:
          type: boolean
        encryption:
          type: boolean
        policy_enforcement:
          type: boolean
        mask_license:
          type: boolean
      type: object
    config.GC:
      additionalProperties: false
      example:
        batch_size: 6
        grace_period_days: 1
      properties:
        batch_size:
          type: integer
        grace_period_days:
          type: integer
      type: object
    config.KMS:
      additionalProperties: false
      example:
        seed: seed
        cache_enable: true
        uri: uri
      properties:
        cache_enable:
          type: boolean
        seed:
          type: string
        uri:
          type: string
      type: object
    config.Log:
      additionalProperties: false
      example:
        customer_env: customer_env
        level: level
        customer_identifier: customer_identifier
        datadog_apm_enable: true
        datadog_enable: true
        datadog_source: datadog_source
      properties:
        customer_env:
          type: string
        customer_identifier:
          type: string
        datadog_apm_enable:
          type: boolean
        datadog_enable:
          type: boolean
        datadog_source:
          type: string
        level:
          type: string
      type: object
    config.Migration:
      additionalProperties: false
      example:
        initial_wait_between_retries: 2
        max_retries: 7
        enable_retries: true
        max_wait_between_retries: 9
        auto_run: true
      properties:
        auto_run:
          type: boolean
        enable_retries:
          type: boolean
        initial_wait_between_retries:
          type: integer
        max_retries:
          type: integer
        max_wait_between_retries:
          type: integer
      type: object
    config.Sentry:
      additionalProperties: false
      example:
        enable: true
      properties:
        enable:
          type: boolean
      type: object
    config.Service:
      additionalProperties: false
      example:
        cache_refresh_interval_seconds: 1.2315135367772556
        license: license
        default_page_size: 2
        force_access_reason: true
        admin_api_key: admin_api_key
        listen_addr: listen_addr
        max_page_size: 4
        timeout_seconds: 7.386281948385884
        admin_may_read_data: true
      properties:
        admin_api_key:
          type: string
        admin_may_read_data:
          type: boolean
        default_page_size:
          type: integer
        force_access_reason:
          type: boolean
        listen_addr:
          type: string
        max_page_size:
          type: integer
        timeout_seconds:
          type: number
        cache_refresh_interval_seconds:
          type: number
        license:
          type: string
      type: object
    config.TLS:
      additionalProperties: false
      example:
        key_file: key_file
        selfsigned: true
        enable: true
        cert_file: cert_file
      properties:
        cert_file:
          type: string
        enable:
          type: boolean
        key_file:
          type: string
        selfsigned:
          type: boolean
      type: object
    config.TTL:
      additionalProperties: false
      example:
        associated_objects: 1
        unassociated_objects: 6
        tokens: 1
      properties:
        associated_objects:
          type: integer
        tokens:
          type: integer
        unassociated_objects:
          type: integer
      type: object
    gc.DeletionCount:
      additionalProperties: false
      example:
        count: 0
        collection_type: collection_type
        collection_name: collection_name
      properties:
        collection_name:
          type: string
        collection_type:
          type: string
        count:
          type: integer
      type: object
    models.Collection:
      additionalProperties: false
      example:
        creation_time: 2022-07-05T08:47:12.047Z
        name: employees
        type: PERSONS
        modification_time: 2022-07-05T08:47:12.047Z
        properties:
        - creation_time: 2022-07-05T08:47:12.047Z
          is_readonly: true
          pii_type_name: STRING
          is_index: false
          is_nullable: true
          is_array: true
          is_encrypted: true
          name: middle_name
          description: The object's middle name.
          is_unique: false
          modification_time: 2022-07-05T08:47:12.047Z
          is_builtin: true
        - creation_time: 2022-07-05T08:47:12.047Z
          is_readonly: true
          pii_type_name: STRING
          is_index: false
          is_nullable: true
          is_array: true
          is_encrypted: true
          name: middle_name
          description: The object's middle name.
          is_unique: false
          modification_time: 2022-07-05T08:47:12.047Z
          is_builtin: true
      properties:
        creation_time:
          description: The time when the collection was created in an RFC3339 format.
          example: 2022-07-05T08:47:12.047Z
          format: date-time
          readOnly: true
          type: string
        modification_time:
          description: The time when the collection was last modified in an RFC3339
            format.
          example: 2022-07-05T08:47:12.047Z
          format: date-time
          readOnly: true
          type: string
        name:
          description: The name of the collection.
          example: employees
          type: string
        properties:
          items:
            $ref: '#/components/schemas/models.Property'
          type: array
        type:
          description: The schema prototype the collection is based on.
          enum:
          - PERSONS
          - DATA
          example: PERSONS
          type: string
      required:
      - name
      - type
      type: object
    models.ConfVar:
      additionalProperties: false
      example:
        name: log_level
        value: ""
      properties:
        name:
          description: The name of the configuration variable.
          example: log_level
          type: string
        value:
          description: The value of the configuration variable.
      type: object
    models.License:
      additionalProperties: false
      example:
        expiration: 2022-07-05T08:47:12.047Z
        key: key
      properties:
        key:
          description: The full license activation key.
          type: string
        expiration:
          description: The expiration date of the token in an RFC3339 format.
          example: 2022-07-05T08:47:12.047Z
          format: date-time
          type: string
      type: object
    models.ConfVarValue:
      additionalProperties: false
      properties:
        value:
          description: The value of the configuration variable.
      type: object
    models.ConfigurationDoc:
      additionalProperties: false
      description: "Additional information about the transformation, as key-value\
        \ pairs."
      example:
        non_masked_length: 4
      properties:
        non_masked_length:
          description: "Example transformation control key, in this case controlling\
            \ the number of characters not masked in a data type."
          example: 4
          type: integer
      type: object
    models.DetokenizedToken:
      additionalProperties: false
      example:
        token_id: token_id
        fields:
          key: ""
      properties:
        fields:
          additionalProperties: true
          type: object
        token_id:
          type: string
      type: object
    models.Health:
      additionalProperties: false
      example:
        status: pass
      properties:
        status:
          description: The status of the service.
          example: pass
          type: string
      type: object
    models.KMSStatus:
      additionalProperties: false
      example:
        name: AWS
      properties:
        name:
          description: The type of the configured KMS
          example: AWS
          type: string
      type: object
    models.Object:
      additionalProperties: true
      example:
        date_of_birth: 1993-02-22
        email: patfar@example.com
        first_name: Pat
        foreign_id: ff5ced0b-0788-4cfa-8235-76e6098f11cb
        gender: Female
        last_name: Far
        other_emails:
        - pf@example.com
        - pfar@example.com
        other_phone_numbers:
        - 120220202020
        - 130330303030
        phone_number: 110110101010
        tenant_id: 6168d7c6-ee0d-4b63-8efb-24a8ca361fb4
        zip_code_us: 10101
      properties:
        _id:
          description: The ID of the object.
          example: b86718a3-f4a7-4e40-bb59-681f22b62649
          readOnly: true
          type: string
      type: object
    models.ObjectFields:
      additionalProperties: true
      type: object
    models.ObjectFieldsPage:
      additionalProperties: false
      example:
        paging:
          cursor: cursor
          size: 0.8008281904610115
          remaining_count: 6.027456183070403
        results:
        - null
        - null
      properties:
        results:
          description: The page objects.
          items:
            $ref: '#/components/schemas/models.ObjectFields'
          type: array
        paging:
          $ref: '#/components/schemas/models.Paging'
      type: object
    models.Paging:
      additionalProperties: false
      description: Pagination information.
      example:
        cursor: cursor
        size: 0.8008281904610115
        remaining_count: 6.027456183070403
      properties:
        size:
          description: Number of results in the current page.
          type: number
        remaining_count:
          description: The remaining number of objects that can be read in ensuing
            calls to this method.
          type: number
        cursor:
          description: An opaque string you should provide to get the next page.
          type: string
      type: object
    models.ProductVersion:
      additionalProperties: false
      example:
        db_schema_version: 0
        vault_version: 0.9.5.1-g2be0eb7e
        vault_id: "1525298622245191836"
      properties:
        db_schema_version:
          type: integer
        vault_id:
          example: "1525298622245191836"
          type: string
        vault_version:
          description: "The version of a Vault specified as a string consisting of\
            \ version number, build number, and edition."
          example: 0.9.5.1-g2be0eb7e
          type: string
      type: object
    models.Property:
      additionalProperties: false
      example:
        creation_time: 2022-07-05T08:47:12.047Z
        is_readonly: true
        pii_type_name: STRING
        is_index: false
        is_nullable: true
        is_array: true
        is_encrypted: true
        name: middle_name
        description: The object's middle name.
        is_unique: false
        modification_time: 2022-07-05T08:47:12.047Z
        is_builtin: true
      properties:
        creation_time:
          description: The time when the property was created in an RFC3339 format.
          example: 2022-07-05T08:47:12.047Z
          format: date-time
          readOnly: true
          type: string
        description:
          description: "The description of the property, If not provided, is set to\
            \ an empty String."
          example: The object's middle name.
          type: string
        is_array:
          description: Whether the property is an array or a value.
          example: true
          type: boolean
        is_builtin:
          default: false
          description: Whether the property is created by Vault (or by the user)
          example: true
          readOnly: true
          type: boolean
        is_encrypted:
          default: false
          description: Whether the value is stored encrypted and decrypted when retrieved
            by a caller. Encryption provides extra protection against a malicious
            actor gaining access to the backend storage.
          example: true
          type: boolean
        is_index:
          default: false
          description: Whether the backend storage is optimized for searches on this
            value.
          example: false
          type: boolean
        is_nullable:
          default: false
          description: Whether the value of the field can be removed (set to null).
          example: true
          type: boolean
        is_readonly:
          default: false
          description: "When is_builtin is true, whether the user can modify values\
            \ of this property."
          example: true
          readOnly: true
          type: boolean
        is_unique:
          default: false
          description: Whether the backend storage enforces unique values.
          example: false
          type: boolean
        modification_time:
          description: The time when the property was last modified in an RFC3339
            format.
          example: 2022-07-05T08:47:12.047Z
          format: date-time
          readOnly: true
          type: string
        name:
          description: "The name of the property. This is the name of the column in\
            \ the data_{collection_name} table. Must be unique."
          example: middle_name
          type: string
        pii_type_name:
          description: The name of the property type.
          example: STRING
          type: string
      required:
      - is_array
      - name
      - pii_type_name
      type: object
    models.Query:
      additionalProperties: false
      properties:
        match:
          additionalProperties: true
          type: object
      type: object
    models.QueryMap:
      additionalProperties: true
      type: object
    models.QueryToken:
      additionalProperties: false
      properties:
        object_id:
          description: Object IDs to query.
          items:
            format: uuid
            type: string
          type: array
        token_id:
          description: Token IDs to query.
          items:
            type: string
          type: array
        tag:
          description: tags to query.
          items:
            type: string
          type: array
      type: object
    models.RotatedToken:
      additionalProperties: false
      example:
        old_token_id: old_token_id
        new_token_id: new_token_id
      properties:
        new_token_id:
          type: string
        old_token_id:
          type: string
      type: object
    models.TokenAggregatedMetadata:
      additionalProperties: false
      example:
        max_effective_expiration_time: 2000-01-23T04:56:07.000+00:00
      properties:
        max_effective_expiration_time:
          description: Latest expiry of all tokens with the token ID (UTC).
          format: date-time
          type: string
      type: object
    models.TokenMetadata:
      additionalProperties: false
      example:
        agg:
          max_effective_expiration_time: 2000-01-23T04:56:07.000+00:00
        token_id: token_id
        reusable_token_id: true
        reversible: true
        scope: scope
        tokens:
        - creation_time: 2000-01-23T04:56:07.000+00:00
          expiration_time: 2000-01-23T04:56:07.000+00:00
          effective_expiration_time: 2000-01-23T04:56:07.000+00:00
          object_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tags:
          - tags
          - tags
        - creation_time: 2000-01-23T04:56:07.000+00:00
          expiration_time: 2000-01-23T04:56:07.000+00:00
          effective_expiration_time: 2000-01-23T04:56:07.000+00:00
          object_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tags:
          - tags
          - tags
      properties:
        agg:
          $ref: '#/components/schemas/models.TokenAggregatedMetadata'
        reusable_token_id:
          description: ID reusability status of the tokens.
          type: boolean
        reversible:
          description: Whether the token is reversible or not.
          type: boolean
        scope:
          description: The scope of the tokens.
          type: string
        token_id:
          description: The shared ID of the tokens.
          type: string
        tokens:
          description: Metadata for the each token.
          items:
            $ref: '#/components/schemas/models.TokenRefMetadata'
          type: array
      type: object
    models.TokenRefMetadata:
      additionalProperties: false
      example:
        creation_time: 2000-01-23T04:56:07.000+00:00
        expiration_time: 2000-01-23T04:56:07.000+00:00
        effective_expiration_time: 2000-01-23T04:56:07.000+00:00
        object_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        tags:
        - tags
        - tags
      properties:
        creation_time:
          description: Creation time of the token (UTC).
          format: date-time
          type: string
        effective_expiration_time:
          description: Effective expiry time of the token (UTC).
          format: date-time
          type: string
        expiration_time:
          description: Expiry time of the token (UTC).
          format: date-time
          type: string
        object_id:
          description: The object of which the was were tokenized.
          format: uuid
          type: string
        tags:
          description: Tags attached to the token.
          items:
            type: string
          type: array
      type: object
    models.TokenValue:
      additionalProperties: false
      example:
        token_id: token_id
      properties:
        token_id:
          description: The value of the token.
          type: string
      required:
      - token_id
      type: object
    models.TokenizeRequest:
      additionalProperties: false
      properties:
        fpprops:
          description: Format preserving properties names to be used by the template
            for the ID generation.
          items:
            type: string
          type: array
        fptemplate:
          description: Format preserving template to use. Keep empty to use UUID.
          type: string
        object_ids:
          description: Object IDs to tokenize.
          items:
            format: uuid
            type: string
          type: array
        props:
          description: The properties to tokenize.
          items:
            type: string
          type: array
        reuse_token_id:
          default: false
          description: Whether the token ID can be reused if tokenizing the same data.
          type: boolean
        reversible:
          default: true
          description: Whether the token can be detokenized.
          type: boolean
        scope:
          default: default
          description: Uniqueness scope of the token.
          type: string
        tags:
          description: Tags to attach to the token (max 10).
          items:
            type: string
          type: array
        type:
          description: Token type.
          enum:
          - pointer
          - value
          type: string
      required:
      - object_ids
      - props
      - type
      type: object
    models.TransformationDoc:
      additionalProperties: false
      description: "Details of a transformation that can be performed on a PII data\
        \ type within a collection. Note: `pii_type_id` and `name` together are also\
        \ a unique identifier of a transformation in a collection."
      example:
        pii_type_name: email
        configuration:
          non_masked_length: 4
        name: mask
      properties:
        configuration:
          $ref: '#/components/schemas/models.ConfigurationDoc'
        name:
          description: The name of the transformation.
          example: mask
          type: string
        pii_type_name:
          description: The name of the PII type.
          example: email
          readOnly: true
          type: string
      type: object
    models.UpdateTokenRequest:
      additionalProperties: false
      properties:
        tags:
          description: Replacement tags for the token.
          items:
            type: string
          type: array
      type: object
    piitype.PIIType:
      additionalProperties: false
      example:
        name: STRING
        description: a string of up to 450 characters
      properties:
        description:
          description: The description of the PII type.
          example: a string of up to 450 characters
          readOnly: true
          type: string
        name:
          description: The name of the PII type.
          example: STRING
          readOnly: true
          type: string
      type: object
    models.AllGenerations:
      additionalProperties: false
      example:
        workers:
        - refresh_interval_seconds: 5
          generation_number: 1
          modified_at: 2000-01-23T04:56:07.000+00:00
          worker_id: 6
        - refresh_interval_seconds: 5
          generation_number: 1
          modified_at: 2000-01-23T04:56:07.000+00:00
          worker_id: 6
        vault:
          generation_number: 0
          modified_at: 2000-01-23T04:56:07.000+00:00
      properties:
        vault:
          $ref: '#/components/schemas/models.VaultGeneration'
        workers:
          description: Workers generations.
          items:
            $ref: '#/components/schemas/models.Worker'
          type: array
      type: object
    models.VaultGeneration:
      additionalProperties: false
      description: Vault Generation.
      example:
        generation_number: 0
        modified_at: 2000-01-23T04:56:07.000+00:00
      properties:
        generation_number:
          description: Generation number.
          type: integer
        modified_at:
          description: Modified at.
          format: date-time
          type: string
      type: object
    models.Worker:
      additionalProperties: false
      description: Worker.
      example:
        refresh_interval_seconds: 5
        generation_number: 1
        modified_at: 2000-01-23T04:56:07.000+00:00
        worker_id: 6
      properties:
        worker_id:
          description: Worker id.
          type: integer
        generation_number:
          description: Generation number.
          type: integer
        modified_at:
          description: Modified at.
          format: date-time
          type: string
        refresh_interval_seconds:
          description: Refresh interval in seconds.
          type: integer
      type: object
    models.APIKey:
      additionalProperties: false
      example:
        api_key: some_user
        api_key_expiry: 2022-07-05T08:47:12.047Z
      properties:
        api_key:
          description: The new API key generated for the user.
          example: some_user
          type: string
        api_key_expiry:
          description: The expiry time of the API key.
          example: 2022-07-05T08:47:12.047Z
          format: date-time
          type: string
      type: object
    rest.HTTPError:
      additionalProperties: false
      properties:
        context:
          additionalProperties:
            type: string
          description: The error context.
          example:
            object_id: abc
          type: object
        error_code:
          description: The error code.
          example: PVxxxx
          type: string
        message:
          description: The error message.
          example: The object is not found.
          type: string
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
      x-text-ref-description: ../bearer-auth.md

