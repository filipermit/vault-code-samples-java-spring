/*
 * Piiano Vault REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModelsQueryToken
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-03T07:11:51.536091Z[Etc/UTC]")
public class ModelsQueryToken {
  public static final String SERIALIZED_NAME_OBJECT_ID = "object_id";
  @SerializedName(SERIALIZED_NAME_OBJECT_ID)
  private List<UUID> objectId = null;

  public static final String SERIALIZED_NAME_TOKEN_ID = "token_id";
  @SerializedName(SERIALIZED_NAME_TOKEN_ID)
  private List<String> tokenId = null;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private List<String> tag = null;

  public ModelsQueryToken() {
  }

  public ModelsQueryToken objectId(List<UUID> objectId) {
    
    this.objectId = objectId;
    return this;
  }

  public ModelsQueryToken addObjectIdItem(UUID objectIdItem) {
    if (this.objectId == null) {
      this.objectId = new ArrayList<>();
    }
    this.objectId.add(objectIdItem);
    return this;
  }

   /**
   * Object IDs to query.
   * @return objectId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Object IDs to query.")

  public List<UUID> getObjectId() {
    return objectId;
  }


  public void setObjectId(List<UUID> objectId) {
    this.objectId = objectId;
  }


  public ModelsQueryToken tokenId(List<String> tokenId) {
    
    this.tokenId = tokenId;
    return this;
  }

  public ModelsQueryToken addTokenIdItem(String tokenIdItem) {
    if (this.tokenId == null) {
      this.tokenId = new ArrayList<>();
    }
    this.tokenId.add(tokenIdItem);
    return this;
  }

   /**
   * Token IDs to query.
   * @return tokenId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Token IDs to query.")

  public List<String> getTokenId() {
    return tokenId;
  }


  public void setTokenId(List<String> tokenId) {
    this.tokenId = tokenId;
  }


  public ModelsQueryToken tag(List<String> tag) {
    
    this.tag = tag;
    return this;
  }

  public ModelsQueryToken addTagItem(String tagItem) {
    if (this.tag == null) {
      this.tag = new ArrayList<>();
    }
    this.tag.add(tagItem);
    return this;
  }

   /**
   * tags to query.
   * @return tag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "tags to query.")

  public List<String> getTag() {
    return tag;
  }


  public void setTag(List<String> tag) {
    this.tag = tag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsQueryToken modelsQueryToken = (ModelsQueryToken) o;
    return Objects.equals(this.objectId, modelsQueryToken.objectId) &&
        Objects.equals(this.tokenId, modelsQueryToken.tokenId) &&
        Objects.equals(this.tag, modelsQueryToken.tag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(objectId, tokenId, tag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsQueryToken {\n");
    sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
    sb.append("    tokenId: ").append(toIndentedString(tokenId)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("object_id");
    openapiFields.add("token_id");
    openapiFields.add("tag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsQueryToken
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ModelsQueryToken.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsQueryToken is not found in the empty JSON string", ModelsQueryToken.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelsQueryToken.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsQueryToken` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if ((jsonObj.get("object_id") != null && !jsonObj.get("object_id").isJsonNull()) && !jsonObj.get("object_id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `object_id` to be an array in the JSON string but got `%s`", jsonObj.get("object_id").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("token_id") != null && !jsonObj.get("token_id").isJsonNull()) && !jsonObj.get("token_id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_id` to be an array in the JSON string but got `%s`", jsonObj.get("token_id").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be an array in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsQueryToken.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsQueryToken' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsQueryToken> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsQueryToken.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsQueryToken>() {
           @Override
           public void write(JsonWriter out, ModelsQueryToken value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsQueryToken read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsQueryToken given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsQueryToken
  * @throws IOException if the JSON string is invalid with respect to ModelsQueryToken
  */
  public static ModelsQueryToken fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsQueryToken.class);
  }

 /**
  * Convert an instance of ModelsQueryToken to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

