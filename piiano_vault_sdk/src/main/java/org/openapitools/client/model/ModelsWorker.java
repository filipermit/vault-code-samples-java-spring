/*
 * Piiano Vault REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Worker.
 */
@ApiModel(description = "Worker.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-03T07:11:51.536091Z[Etc/UTC]")
public class ModelsWorker {
  public static final String SERIALIZED_NAME_WORKER_ID = "worker_id";
  @SerializedName(SERIALIZED_NAME_WORKER_ID)
  private Integer workerId;

  public static final String SERIALIZED_NAME_GENERATION_NUMBER = "generation_number";
  @SerializedName(SERIALIZED_NAME_GENERATION_NUMBER)
  private Integer generationNumber;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modified_at";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_REFRESH_INTERVAL_SECONDS = "refresh_interval_seconds";
  @SerializedName(SERIALIZED_NAME_REFRESH_INTERVAL_SECONDS)
  private Integer refreshIntervalSeconds;

  public ModelsWorker() {
  }

  public ModelsWorker workerId(Integer workerId) {
    
    this.workerId = workerId;
    return this;
  }

   /**
   * Worker id.
   * @return workerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Worker id.")

  public Integer getWorkerId() {
    return workerId;
  }


  public void setWorkerId(Integer workerId) {
    this.workerId = workerId;
  }


  public ModelsWorker generationNumber(Integer generationNumber) {
    
    this.generationNumber = generationNumber;
    return this;
  }

   /**
   * Generation number.
   * @return generationNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Generation number.")

  public Integer getGenerationNumber() {
    return generationNumber;
  }


  public void setGenerationNumber(Integer generationNumber) {
    this.generationNumber = generationNumber;
  }


  public ModelsWorker modifiedAt(OffsetDateTime modifiedAt) {
    
    this.modifiedAt = modifiedAt;
    return this;
  }

   /**
   * Modified at.
   * @return modifiedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Modified at.")

  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }


  public void setModifiedAt(OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }


  public ModelsWorker refreshIntervalSeconds(Integer refreshIntervalSeconds) {
    
    this.refreshIntervalSeconds = refreshIntervalSeconds;
    return this;
  }

   /**
   * Refresh interval in seconds.
   * @return refreshIntervalSeconds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Refresh interval in seconds.")

  public Integer getRefreshIntervalSeconds() {
    return refreshIntervalSeconds;
  }


  public void setRefreshIntervalSeconds(Integer refreshIntervalSeconds) {
    this.refreshIntervalSeconds = refreshIntervalSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsWorker modelsWorker = (ModelsWorker) o;
    return Objects.equals(this.workerId, modelsWorker.workerId) &&
        Objects.equals(this.generationNumber, modelsWorker.generationNumber) &&
        Objects.equals(this.modifiedAt, modelsWorker.modifiedAt) &&
        Objects.equals(this.refreshIntervalSeconds, modelsWorker.refreshIntervalSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(workerId, generationNumber, modifiedAt, refreshIntervalSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsWorker {\n");
    sb.append("    workerId: ").append(toIndentedString(workerId)).append("\n");
    sb.append("    generationNumber: ").append(toIndentedString(generationNumber)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    refreshIntervalSeconds: ").append(toIndentedString(refreshIntervalSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("worker_id");
    openapiFields.add("generation_number");
    openapiFields.add("modified_at");
    openapiFields.add("refresh_interval_seconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsWorker
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ModelsWorker.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsWorker is not found in the empty JSON string", ModelsWorker.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelsWorker.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsWorker` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsWorker.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsWorker' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsWorker> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsWorker.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsWorker>() {
           @Override
           public void write(JsonWriter out, ModelsWorker value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsWorker read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsWorker given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsWorker
  * @throws IOException if the JSON string is invalid with respect to ModelsWorker
  */
  public static ModelsWorker fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsWorker.class);
  }

 /**
  * Convert an instance of ModelsWorker to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

