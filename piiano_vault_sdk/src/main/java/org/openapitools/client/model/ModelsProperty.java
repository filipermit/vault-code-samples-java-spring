/*
 * Piiano Vault REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModelsProperty
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-03T07:11:51.536091Z[Etc/UTC]")
public class ModelsProperty {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creation_time";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_ARRAY = "is_array";
  @SerializedName(SERIALIZED_NAME_IS_ARRAY)
  private Boolean isArray;

  public static final String SERIALIZED_NAME_IS_BUILTIN = "is_builtin";
  @SerializedName(SERIALIZED_NAME_IS_BUILTIN)
  private Boolean isBuiltin = false;

  public static final String SERIALIZED_NAME_IS_ENCRYPTED = "is_encrypted";
  @SerializedName(SERIALIZED_NAME_IS_ENCRYPTED)
  private Boolean isEncrypted = false;

  public static final String SERIALIZED_NAME_IS_INDEX = "is_index";
  @SerializedName(SERIALIZED_NAME_IS_INDEX)
  private Boolean isIndex = false;

  public static final String SERIALIZED_NAME_IS_NULLABLE = "is_nullable";
  @SerializedName(SERIALIZED_NAME_IS_NULLABLE)
  private Boolean isNullable = false;

  public static final String SERIALIZED_NAME_IS_READONLY = "is_readonly";
  @SerializedName(SERIALIZED_NAME_IS_READONLY)
  private Boolean isReadonly = false;

  public static final String SERIALIZED_NAME_IS_UNIQUE = "is_unique";
  @SerializedName(SERIALIZED_NAME_IS_UNIQUE)
  private Boolean isUnique = false;

  public static final String SERIALIZED_NAME_MODIFICATION_TIME = "modification_time";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_TIME)
  private OffsetDateTime modificationTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PII_TYPE_NAME = "pii_type_name";
  @SerializedName(SERIALIZED_NAME_PII_TYPE_NAME)
  private String piiTypeName;

  public ModelsProperty() {
  }

  
  public ModelsProperty(
     OffsetDateTime creationTime, 
     Boolean isBuiltin, 
     Boolean isReadonly, 
     OffsetDateTime modificationTime
  ) {
    this();
    this.creationTime = creationTime;
    this.isBuiltin = isBuiltin;
    this.isReadonly = isReadonly;
    this.modificationTime = modificationTime;
  }

   /**
   * The time when the property was created in an RFC3339 format.
   * @return creationTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-07-05T08:47:12.047Z", value = "The time when the property was created in an RFC3339 format.")

  public OffsetDateTime getCreationTime() {
    return creationTime;
  }




  public ModelsProperty description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The description of the property, If not provided, is set to an empty String.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "The object's middle name.", value = "The description of the property, If not provided, is set to an empty String.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ModelsProperty isArray(Boolean isArray) {
    
    this.isArray = isArray;
    return this;
  }

   /**
   * Whether the property is an array or a value.
   * @return isArray
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the property is an array or a value.")

  public Boolean getIsArray() {
    return isArray;
  }


  public void setIsArray(Boolean isArray) {
    this.isArray = isArray;
  }


   /**
   * Whether the property is created by Vault (or by the user)
   * @return isBuiltin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the property is created by Vault (or by the user)")

  public Boolean getIsBuiltin() {
    return isBuiltin;
  }




  public ModelsProperty isEncrypted(Boolean isEncrypted) {
    
    this.isEncrypted = isEncrypted;
    return this;
  }

   /**
   * Whether the value is stored encrypted and decrypted when retrieved by a caller. Encryption provides extra protection against a malicious actor gaining access to the backend storage.
   * @return isEncrypted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the value is stored encrypted and decrypted when retrieved by a caller. Encryption provides extra protection against a malicious actor gaining access to the backend storage.")

  public Boolean getIsEncrypted() {
    return isEncrypted;
  }


  public void setIsEncrypted(Boolean isEncrypted) {
    this.isEncrypted = isEncrypted;
  }


  public ModelsProperty isIndex(Boolean isIndex) {
    
    this.isIndex = isIndex;
    return this;
  }

   /**
   * Whether the backend storage is optimized for searches on this value.
   * @return isIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether the backend storage is optimized for searches on this value.")

  public Boolean getIsIndex() {
    return isIndex;
  }


  public void setIsIndex(Boolean isIndex) {
    this.isIndex = isIndex;
  }


  public ModelsProperty isNullable(Boolean isNullable) {
    
    this.isNullable = isNullable;
    return this;
  }

   /**
   * Whether the value of the field can be removed (set to null).
   * @return isNullable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the value of the field can be removed (set to null).")

  public Boolean getIsNullable() {
    return isNullable;
  }


  public void setIsNullable(Boolean isNullable) {
    this.isNullable = isNullable;
  }


   /**
   * When is_builtin is true, whether the user can modify values of this property.
   * @return isReadonly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "When is_builtin is true, whether the user can modify values of this property.")

  public Boolean getIsReadonly() {
    return isReadonly;
  }




  public ModelsProperty isUnique(Boolean isUnique) {
    
    this.isUnique = isUnique;
    return this;
  }

   /**
   * Whether the backend storage enforces unique values.
   * @return isUnique
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether the backend storage enforces unique values.")

  public Boolean getIsUnique() {
    return isUnique;
  }


  public void setIsUnique(Boolean isUnique) {
    this.isUnique = isUnique;
  }


   /**
   * The time when the property was last modified in an RFC3339 format.
   * @return modificationTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-07-05T08:47:12.047Z", value = "The time when the property was last modified in an RFC3339 format.")

  public OffsetDateTime getModificationTime() {
    return modificationTime;
  }




  public ModelsProperty name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the property. This is the name of the column in the data_{collection_name} table. Must be unique.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "middle_name", required = true, value = "The name of the property. This is the name of the column in the data_{collection_name} table. Must be unique.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ModelsProperty piiTypeName(String piiTypeName) {
    
    this.piiTypeName = piiTypeName;
    return this;
  }

   /**
   * The name of the property type.
   * @return piiTypeName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "STRING", required = true, value = "The name of the property type.")

  public String getPiiTypeName() {
    return piiTypeName;
  }


  public void setPiiTypeName(String piiTypeName) {
    this.piiTypeName = piiTypeName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsProperty modelsProperty = (ModelsProperty) o;
    return Objects.equals(this.creationTime, modelsProperty.creationTime) &&
        Objects.equals(this.description, modelsProperty.description) &&
        Objects.equals(this.isArray, modelsProperty.isArray) &&
        Objects.equals(this.isBuiltin, modelsProperty.isBuiltin) &&
        Objects.equals(this.isEncrypted, modelsProperty.isEncrypted) &&
        Objects.equals(this.isIndex, modelsProperty.isIndex) &&
        Objects.equals(this.isNullable, modelsProperty.isNullable) &&
        Objects.equals(this.isReadonly, modelsProperty.isReadonly) &&
        Objects.equals(this.isUnique, modelsProperty.isUnique) &&
        Objects.equals(this.modificationTime, modelsProperty.modificationTime) &&
        Objects.equals(this.name, modelsProperty.name) &&
        Objects.equals(this.piiTypeName, modelsProperty.piiTypeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, description, isArray, isBuiltin, isEncrypted, isIndex, isNullable, isReadonly, isUnique, modificationTime, name, piiTypeName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsProperty {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isArray: ").append(toIndentedString(isArray)).append("\n");
    sb.append("    isBuiltin: ").append(toIndentedString(isBuiltin)).append("\n");
    sb.append("    isEncrypted: ").append(toIndentedString(isEncrypted)).append("\n");
    sb.append("    isIndex: ").append(toIndentedString(isIndex)).append("\n");
    sb.append("    isNullable: ").append(toIndentedString(isNullable)).append("\n");
    sb.append("    isReadonly: ").append(toIndentedString(isReadonly)).append("\n");
    sb.append("    isUnique: ").append(toIndentedString(isUnique)).append("\n");
    sb.append("    modificationTime: ").append(toIndentedString(modificationTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    piiTypeName: ").append(toIndentedString(piiTypeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creation_time");
    openapiFields.add("description");
    openapiFields.add("is_array");
    openapiFields.add("is_builtin");
    openapiFields.add("is_encrypted");
    openapiFields.add("is_index");
    openapiFields.add("is_nullable");
    openapiFields.add("is_readonly");
    openapiFields.add("is_unique");
    openapiFields.add("modification_time");
    openapiFields.add("name");
    openapiFields.add("pii_type_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("is_array");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("pii_type_name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsProperty
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ModelsProperty.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsProperty is not found in the empty JSON string", ModelsProperty.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelsProperty.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsProperty` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModelsProperty.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("pii_type_name") != null && !jsonObj.get("pii_type_name").isJsonNull()) && !jsonObj.get("pii_type_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pii_type_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pii_type_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsProperty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsProperty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsProperty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsProperty.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsProperty>() {
           @Override
           public void write(JsonWriter out, ModelsProperty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsProperty read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsProperty given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsProperty
  * @throws IOException if the JSON string is invalid with respect to ModelsProperty
  */
  public static ModelsProperty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsProperty.class);
  }

 /**
  * Convert an instance of ModelsProperty to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

