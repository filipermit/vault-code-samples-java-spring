/*
 * Piiano Vault REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModelsTokenRefMetadata
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-03T07:11:51.536091Z[Etc/UTC]")
public class ModelsTokenRefMetadata {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creation_time";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_EFFECTIVE_EXPIRATION_TIME = "effective_expiration_time";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_EXPIRATION_TIME)
  private OffsetDateTime effectiveExpirationTime;

  public static final String SERIALIZED_NAME_EXPIRATION_TIME = "expiration_time";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_TIME)
  private OffsetDateTime expirationTime;

  public static final String SERIALIZED_NAME_OBJECT_ID = "object_id";
  @SerializedName(SERIALIZED_NAME_OBJECT_ID)
  private UUID objectId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  public ModelsTokenRefMetadata() {
  }

  public ModelsTokenRefMetadata creationTime(OffsetDateTime creationTime) {
    
    this.creationTime = creationTime;
    return this;
  }

   /**
   * Creation time of the token (UTC).
   * @return creationTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Creation time of the token (UTC).")

  public OffsetDateTime getCreationTime() {
    return creationTime;
  }


  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public ModelsTokenRefMetadata effectiveExpirationTime(OffsetDateTime effectiveExpirationTime) {
    
    this.effectiveExpirationTime = effectiveExpirationTime;
    return this;
  }

   /**
   * Effective expiry time of the token (UTC).
   * @return effectiveExpirationTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Effective expiry time of the token (UTC).")

  public OffsetDateTime getEffectiveExpirationTime() {
    return effectiveExpirationTime;
  }


  public void setEffectiveExpirationTime(OffsetDateTime effectiveExpirationTime) {
    this.effectiveExpirationTime = effectiveExpirationTime;
  }


  public ModelsTokenRefMetadata expirationTime(OffsetDateTime expirationTime) {
    
    this.expirationTime = expirationTime;
    return this;
  }

   /**
   * Expiry time of the token (UTC).
   * @return expirationTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Expiry time of the token (UTC).")

  public OffsetDateTime getExpirationTime() {
    return expirationTime;
  }


  public void setExpirationTime(OffsetDateTime expirationTime) {
    this.expirationTime = expirationTime;
  }


  public ModelsTokenRefMetadata objectId(UUID objectId) {
    
    this.objectId = objectId;
    return this;
  }

   /**
   * The object of which the was were tokenized.
   * @return objectId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The object of which the was were tokenized.")

  public UUID getObjectId() {
    return objectId;
  }


  public void setObjectId(UUID objectId) {
    this.objectId = objectId;
  }


  public ModelsTokenRefMetadata tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public ModelsTokenRefMetadata addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Tags attached to the token.
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tags attached to the token.")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsTokenRefMetadata modelsTokenRefMetadata = (ModelsTokenRefMetadata) o;
    return Objects.equals(this.creationTime, modelsTokenRefMetadata.creationTime) &&
        Objects.equals(this.effectiveExpirationTime, modelsTokenRefMetadata.effectiveExpirationTime) &&
        Objects.equals(this.expirationTime, modelsTokenRefMetadata.expirationTime) &&
        Objects.equals(this.objectId, modelsTokenRefMetadata.objectId) &&
        Objects.equals(this.tags, modelsTokenRefMetadata.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, effectiveExpirationTime, expirationTime, objectId, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsTokenRefMetadata {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    effectiveExpirationTime: ").append(toIndentedString(effectiveExpirationTime)).append("\n");
    sb.append("    expirationTime: ").append(toIndentedString(expirationTime)).append("\n");
    sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creation_time");
    openapiFields.add("effective_expiration_time");
    openapiFields.add("expiration_time");
    openapiFields.add("object_id");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsTokenRefMetadata
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ModelsTokenRefMetadata.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsTokenRefMetadata is not found in the empty JSON string", ModelsTokenRefMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelsTokenRefMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsTokenRefMetadata` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("object_id") != null && !jsonObj.get("object_id").isJsonNull()) && !jsonObj.get("object_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object_id").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsTokenRefMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsTokenRefMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsTokenRefMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsTokenRefMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsTokenRefMetadata>() {
           @Override
           public void write(JsonWriter out, ModelsTokenRefMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsTokenRefMetadata read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsTokenRefMetadata given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsTokenRefMetadata
  * @throws IOException if the JSON string is invalid with respect to ModelsTokenRefMetadata
  */
  public static ModelsTokenRefMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsTokenRefMetadata.class);
  }

 /**
  * Convert an instance of ModelsTokenRefMetadata to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

