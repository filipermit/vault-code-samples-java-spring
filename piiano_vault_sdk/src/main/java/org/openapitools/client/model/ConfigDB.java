/*
 * Piiano Vault REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.ConfigGC;
import org.openapitools.client.model.ConfigMigration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfigDB
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-03T07:11:51.536091Z[Etc/UTC]")
public class ConfigDB {
  public static final String SERIALIZED_NAME_CONN_MAX_LIFETIME_MINUTES = "conn_max_lifetime_minutes";
  @SerializedName(SERIALIZED_NAME_CONN_MAX_LIFETIME_MINUTES)
  private Integer connMaxLifetimeMinutes;

  public static final String SERIALIZED_NAME_GC = "gc";
  @SerializedName(SERIALIZED_NAME_GC)
  private ConfigGC gc;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_MAX_IDLE_CONNS = "max_idle_conns";
  @SerializedName(SERIALIZED_NAME_MAX_IDLE_CONNS)
  private Integer maxIdleConns;

  public static final String SERIALIZED_NAME_MAX_OPEN_CONNS = "max_open_conns";
  @SerializedName(SERIALIZED_NAME_MAX_OPEN_CONNS)
  private Integer maxOpenConns;

  public static final String SERIALIZED_NAME_MIGRATION = "migration";
  @SerializedName(SERIALIZED_NAME_MIGRATION)
  private ConfigMigration migration;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_REQUIRE_TLS = "require_tls";
  @SerializedName(SERIALIZED_NAME_REQUIRE_TLS)
  private Boolean requireTls;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public ConfigDB() {
  }

  public ConfigDB connMaxLifetimeMinutes(Integer connMaxLifetimeMinutes) {
    
    this.connMaxLifetimeMinutes = connMaxLifetimeMinutes;
    return this;
  }

   /**
   * Get connMaxLifetimeMinutes
   * @return connMaxLifetimeMinutes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getConnMaxLifetimeMinutes() {
    return connMaxLifetimeMinutes;
  }


  public void setConnMaxLifetimeMinutes(Integer connMaxLifetimeMinutes) {
    this.connMaxLifetimeMinutes = connMaxLifetimeMinutes;
  }


  public ConfigDB gc(ConfigGC gc) {
    
    this.gc = gc;
    return this;
  }

   /**
   * Get gc
   * @return gc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigGC getGc() {
    return gc;
  }


  public void setGc(ConfigGC gc) {
    this.gc = gc;
  }


  public ConfigDB hostname(String hostname) {
    
    this.hostname = hostname;
    return this;
  }

   /**
   * Get hostname
   * @return hostname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHostname() {
    return hostname;
  }


  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public ConfigDB maxIdleConns(Integer maxIdleConns) {
    
    this.maxIdleConns = maxIdleConns;
    return this;
  }

   /**
   * Get maxIdleConns
   * @return maxIdleConns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMaxIdleConns() {
    return maxIdleConns;
  }


  public void setMaxIdleConns(Integer maxIdleConns) {
    this.maxIdleConns = maxIdleConns;
  }


  public ConfigDB maxOpenConns(Integer maxOpenConns) {
    
    this.maxOpenConns = maxOpenConns;
    return this;
  }

   /**
   * Get maxOpenConns
   * @return maxOpenConns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMaxOpenConns() {
    return maxOpenConns;
  }


  public void setMaxOpenConns(Integer maxOpenConns) {
    this.maxOpenConns = maxOpenConns;
  }


  public ConfigDB migration(ConfigMigration migration) {
    
    this.migration = migration;
    return this;
  }

   /**
   * Get migration
   * @return migration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigMigration getMigration() {
    return migration;
  }


  public void setMigration(ConfigMigration migration) {
    this.migration = migration;
  }


  public ConfigDB name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ConfigDB password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }


  public ConfigDB port(Integer port) {
    
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPort() {
    return port;
  }


  public void setPort(Integer port) {
    this.port = port;
  }


  public ConfigDB requireTls(Boolean requireTls) {
    
    this.requireTls = requireTls;
    return this;
  }

   /**
   * Get requireTls
   * @return requireTls
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getRequireTls() {
    return requireTls;
  }


  public void setRequireTls(Boolean requireTls) {
    this.requireTls = requireTls;
  }


  public ConfigDB user(String user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUser() {
    return user;
  }


  public void setUser(String user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigDB configDB = (ConfigDB) o;
    return Objects.equals(this.connMaxLifetimeMinutes, configDB.connMaxLifetimeMinutes) &&
        Objects.equals(this.gc, configDB.gc) &&
        Objects.equals(this.hostname, configDB.hostname) &&
        Objects.equals(this.maxIdleConns, configDB.maxIdleConns) &&
        Objects.equals(this.maxOpenConns, configDB.maxOpenConns) &&
        Objects.equals(this.migration, configDB.migration) &&
        Objects.equals(this.name, configDB.name) &&
        Objects.equals(this.password, configDB.password) &&
        Objects.equals(this.port, configDB.port) &&
        Objects.equals(this.requireTls, configDB.requireTls) &&
        Objects.equals(this.user, configDB.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connMaxLifetimeMinutes, gc, hostname, maxIdleConns, maxOpenConns, migration, name, password, port, requireTls, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigDB {\n");
    sb.append("    connMaxLifetimeMinutes: ").append(toIndentedString(connMaxLifetimeMinutes)).append("\n");
    sb.append("    gc: ").append(toIndentedString(gc)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    maxIdleConns: ").append(toIndentedString(maxIdleConns)).append("\n");
    sb.append("    maxOpenConns: ").append(toIndentedString(maxOpenConns)).append("\n");
    sb.append("    migration: ").append(toIndentedString(migration)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    requireTls: ").append(toIndentedString(requireTls)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conn_max_lifetime_minutes");
    openapiFields.add("gc");
    openapiFields.add("hostname");
    openapiFields.add("max_idle_conns");
    openapiFields.add("max_open_conns");
    openapiFields.add("migration");
    openapiFields.add("name");
    openapiFields.add("password");
    openapiFields.add("port");
    openapiFields.add("require_tls");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConfigDB
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ConfigDB.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigDB is not found in the empty JSON string", ConfigDB.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConfigDB.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigDB` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `gc`
      if (jsonObj.get("gc") != null && !jsonObj.get("gc").isJsonNull()) {
        ConfigGC.validateJsonObject(jsonObj.getAsJsonObject("gc"));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      // validate the optional field `migration`
      if (jsonObj.get("migration") != null && !jsonObj.get("migration").isJsonNull()) {
        ConfigMigration.validateJsonObject(jsonObj.getAsJsonObject("migration"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigDB.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigDB' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigDB> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigDB.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigDB>() {
           @Override
           public void write(JsonWriter out, ConfigDB value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigDB read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConfigDB given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConfigDB
  * @throws IOException if the JSON string is invalid with respect to ConfigDB
  */
  public static ConfigDB fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigDB.class);
  }

 /**
  * Convert an instance of ConfigDB to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

