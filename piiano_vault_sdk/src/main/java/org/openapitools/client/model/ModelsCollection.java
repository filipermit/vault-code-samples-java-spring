/*
 * Piiano Vault REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ModelsProperty;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModelsCollection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-03T07:11:51.536091Z[Etc/UTC]")
public class ModelsCollection {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creation_time";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_MODIFICATION_TIME = "modification_time";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_TIME)
  private OffsetDateTime modificationTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<ModelsProperty> properties = null;

  /**
   * The schema prototype the collection is based on.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PERSONS("PERSONS"),
    
    DATA("DATA");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public ModelsCollection() {
  }

  
  public ModelsCollection(
     OffsetDateTime creationTime, 
     OffsetDateTime modificationTime
  ) {
    this();
    this.creationTime = creationTime;
    this.modificationTime = modificationTime;
  }

   /**
   * The time when the collection was created in an RFC3339 format.
   * @return creationTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-07-05T08:47:12.047Z", value = "The time when the collection was created in an RFC3339 format.")

  public OffsetDateTime getCreationTime() {
    return creationTime;
  }




   /**
   * The time when the collection was last modified in an RFC3339 format.
   * @return modificationTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-07-05T08:47:12.047Z", value = "The time when the collection was last modified in an RFC3339 format.")

  public OffsetDateTime getModificationTime() {
    return modificationTime;
  }




  public ModelsCollection name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the collection.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "employees", required = true, value = "The name of the collection.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ModelsCollection properties(List<ModelsProperty> properties) {
    
    this.properties = properties;
    return this;
  }

  public ModelsCollection addPropertiesItem(ModelsProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ModelsProperty> getProperties() {
    return properties;
  }


  public void setProperties(List<ModelsProperty> properties) {
    this.properties = properties;
  }


  public ModelsCollection type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The schema prototype the collection is based on.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "PERSONS", required = true, value = "The schema prototype the collection is based on.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsCollection modelsCollection = (ModelsCollection) o;
    return Objects.equals(this.creationTime, modelsCollection.creationTime) &&
        Objects.equals(this.modificationTime, modelsCollection.modificationTime) &&
        Objects.equals(this.name, modelsCollection.name) &&
        Objects.equals(this.properties, modelsCollection.properties) &&
        Objects.equals(this.type, modelsCollection.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, modificationTime, name, properties, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsCollection {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    modificationTime: ").append(toIndentedString(modificationTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creation_time");
    openapiFields.add("modification_time");
    openapiFields.add("name");
    openapiFields.add("properties");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsCollection
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ModelsCollection.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsCollection is not found in the empty JSON string", ModelsCollection.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelsCollection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsCollection` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModelsCollection.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      JsonArray jsonArrayproperties = jsonObj.getAsJsonArray("properties");
      if (jsonArrayproperties != null) {
        // ensure the json data is an array
        if (!jsonObj.get("properties").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `properties` to be an array in the JSON string but got `%s`", jsonObj.get("properties").toString()));
        }

        // validate the optional field `properties` (array)
        for (int i = 0; i < jsonArrayproperties.size(); i++) {
          ModelsProperty.validateJsonObject(jsonArrayproperties.get(i).getAsJsonObject());
        };
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsCollection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsCollection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsCollection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsCollection.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsCollection>() {
           @Override
           public void write(JsonWriter out, ModelsCollection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsCollection read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsCollection given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsCollection
  * @throws IOException if the JSON string is invalid with respect to ModelsCollection
  */
  public static ModelsCollection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsCollection.class);
  }

 /**
  * Convert an instance of ModelsCollection to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

