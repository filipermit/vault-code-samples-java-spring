/*
 * Piiano Vault REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModelsTokenizeRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-03T07:11:51.536091Z[Etc/UTC]")
public class ModelsTokenizeRequest {
  public static final String SERIALIZED_NAME_FPPROPS = "fpprops";
  @SerializedName(SERIALIZED_NAME_FPPROPS)
  private List<String> fpprops = null;

  public static final String SERIALIZED_NAME_FPTEMPLATE = "fptemplate";
  @SerializedName(SERIALIZED_NAME_FPTEMPLATE)
  private String fptemplate;

  public static final String SERIALIZED_NAME_OBJECT_IDS = "object_ids";
  @SerializedName(SERIALIZED_NAME_OBJECT_IDS)
  private List<UUID> objectIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROPS = "props";
  @SerializedName(SERIALIZED_NAME_PROPS)
  private List<String> props = new ArrayList<>();

  public static final String SERIALIZED_NAME_REUSE_TOKEN_ID = "reuse_token_id";
  @SerializedName(SERIALIZED_NAME_REUSE_TOKEN_ID)
  private Boolean reuseTokenId = false;

  public static final String SERIALIZED_NAME_REVERSIBLE = "reversible";
  @SerializedName(SERIALIZED_NAME_REVERSIBLE)
  private Boolean reversible = true;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope = "default";

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  /**
   * Token type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    POINTER("pointer"),
    
    VALUE("value");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public ModelsTokenizeRequest() {
  }

  public ModelsTokenizeRequest fpprops(List<String> fpprops) {
    
    this.fpprops = fpprops;
    return this;
  }

  public ModelsTokenizeRequest addFppropsItem(String fppropsItem) {
    if (this.fpprops == null) {
      this.fpprops = new ArrayList<>();
    }
    this.fpprops.add(fppropsItem);
    return this;
  }

   /**
   * Format preserving properties names to be used by the template for the ID generation.
   * @return fpprops
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Format preserving properties names to be used by the template for the ID generation.")

  public List<String> getFpprops() {
    return fpprops;
  }


  public void setFpprops(List<String> fpprops) {
    this.fpprops = fpprops;
  }


  public ModelsTokenizeRequest fptemplate(String fptemplate) {
    
    this.fptemplate = fptemplate;
    return this;
  }

   /**
   * Format preserving template to use. Keep empty to use UUID.
   * @return fptemplate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Format preserving template to use. Keep empty to use UUID.")

  public String getFptemplate() {
    return fptemplate;
  }


  public void setFptemplate(String fptemplate) {
    this.fptemplate = fptemplate;
  }


  public ModelsTokenizeRequest objectIds(List<UUID> objectIds) {
    
    this.objectIds = objectIds;
    return this;
  }

  public ModelsTokenizeRequest addObjectIdsItem(UUID objectIdsItem) {
    this.objectIds.add(objectIdsItem);
    return this;
  }

   /**
   * Object IDs to tokenize.
   * @return objectIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Object IDs to tokenize.")

  public List<UUID> getObjectIds() {
    return objectIds;
  }


  public void setObjectIds(List<UUID> objectIds) {
    this.objectIds = objectIds;
  }


  public ModelsTokenizeRequest props(List<String> props) {
    
    this.props = props;
    return this;
  }

  public ModelsTokenizeRequest addPropsItem(String propsItem) {
    this.props.add(propsItem);
    return this;
  }

   /**
   * The properties to tokenize.
   * @return props
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The properties to tokenize.")

  public List<String> getProps() {
    return props;
  }


  public void setProps(List<String> props) {
    this.props = props;
  }


  public ModelsTokenizeRequest reuseTokenId(Boolean reuseTokenId) {
    
    this.reuseTokenId = reuseTokenId;
    return this;
  }

   /**
   * Whether the token ID can be reused if tokenizing the same data.
   * @return reuseTokenId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the token ID can be reused if tokenizing the same data.")

  public Boolean getReuseTokenId() {
    return reuseTokenId;
  }


  public void setReuseTokenId(Boolean reuseTokenId) {
    this.reuseTokenId = reuseTokenId;
  }


  public ModelsTokenizeRequest reversible(Boolean reversible) {
    
    this.reversible = reversible;
    return this;
  }

   /**
   * Whether the token can be detokenized.
   * @return reversible
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the token can be detokenized.")

  public Boolean getReversible() {
    return reversible;
  }


  public void setReversible(Boolean reversible) {
    this.reversible = reversible;
  }


  public ModelsTokenizeRequest scope(String scope) {
    
    this.scope = scope;
    return this;
  }

   /**
   * Uniqueness scope of the token.
   * @return scope
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Uniqueness scope of the token.")

  public String getScope() {
    return scope;
  }


  public void setScope(String scope) {
    this.scope = scope;
  }


  public ModelsTokenizeRequest tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public ModelsTokenizeRequest addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Tags to attach to the token (max 10).
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tags to attach to the token (max 10).")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public ModelsTokenizeRequest type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Token type.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Token type.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsTokenizeRequest modelsTokenizeRequest = (ModelsTokenizeRequest) o;
    return Objects.equals(this.fpprops, modelsTokenizeRequest.fpprops) &&
        Objects.equals(this.fptemplate, modelsTokenizeRequest.fptemplate) &&
        Objects.equals(this.objectIds, modelsTokenizeRequest.objectIds) &&
        Objects.equals(this.props, modelsTokenizeRequest.props) &&
        Objects.equals(this.reuseTokenId, modelsTokenizeRequest.reuseTokenId) &&
        Objects.equals(this.reversible, modelsTokenizeRequest.reversible) &&
        Objects.equals(this.scope, modelsTokenizeRequest.scope) &&
        Objects.equals(this.tags, modelsTokenizeRequest.tags) &&
        Objects.equals(this.type, modelsTokenizeRequest.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fpprops, fptemplate, objectIds, props, reuseTokenId, reversible, scope, tags, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsTokenizeRequest {\n");
    sb.append("    fpprops: ").append(toIndentedString(fpprops)).append("\n");
    sb.append("    fptemplate: ").append(toIndentedString(fptemplate)).append("\n");
    sb.append("    objectIds: ").append(toIndentedString(objectIds)).append("\n");
    sb.append("    props: ").append(toIndentedString(props)).append("\n");
    sb.append("    reuseTokenId: ").append(toIndentedString(reuseTokenId)).append("\n");
    sb.append("    reversible: ").append(toIndentedString(reversible)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fpprops");
    openapiFields.add("fptemplate");
    openapiFields.add("object_ids");
    openapiFields.add("props");
    openapiFields.add("reuse_token_id");
    openapiFields.add("reversible");
    openapiFields.add("scope");
    openapiFields.add("tags");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("object_ids");
    openapiRequiredFields.add("props");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsTokenizeRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ModelsTokenizeRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsTokenizeRequest is not found in the empty JSON string", ModelsTokenizeRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelsTokenizeRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsTokenizeRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModelsTokenizeRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if ((jsonObj.get("fpprops") != null && !jsonObj.get("fpprops").isJsonNull()) && !jsonObj.get("fpprops").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fpprops` to be an array in the JSON string but got `%s`", jsonObj.get("fpprops").toString()));
      }
      if ((jsonObj.get("fptemplate") != null && !jsonObj.get("fptemplate").isJsonNull()) && !jsonObj.get("fptemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fptemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fptemplate").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("object_ids") != null && !jsonObj.get("object_ids").isJsonNull()) && !jsonObj.get("object_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `object_ids` to be an array in the JSON string but got `%s`", jsonObj.get("object_ids").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("props") != null && !jsonObj.get("props").isJsonNull()) && !jsonObj.get("props").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `props` to be an array in the JSON string but got `%s`", jsonObj.get("props").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsTokenizeRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsTokenizeRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsTokenizeRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsTokenizeRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsTokenizeRequest>() {
           @Override
           public void write(JsonWriter out, ModelsTokenizeRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsTokenizeRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsTokenizeRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsTokenizeRequest
  * @throws IOException if the JSON string is invalid with respect to ModelsTokenizeRequest
  */
  public static ModelsTokenizeRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsTokenizeRequest.class);
  }

 /**
  * Convert an instance of ModelsTokenizeRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

