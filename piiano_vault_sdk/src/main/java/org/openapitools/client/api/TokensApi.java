/*
 * Piiano Vault REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ModelsDetokenizedToken;
import org.openapitools.client.model.ModelsQueryToken;
import org.openapitools.client.model.ModelsRotatedToken;
import org.openapitools.client.model.ModelsTokenMetadata;
import org.openapitools.client.model.ModelsTokenValue;
import org.openapitools.client.model.ModelsTokenizeRequest;
import org.openapitools.client.model.ModelsUpdateTokenRequest;
import org.openapitools.client.model.RestHTTPError;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TokensApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TokensApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TokensApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteTokens
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param objectId Comma-separated list of object IDs. (optional)
     * @param tag Comma-separated list of tags. (optional)
     * @param tokenId Comma-separated list of token IDs. (optional)
     * @param options Options for the operation. Options include: - &#x60;hard_delete&#x60; – permanently delete the tokens. - &#x60;deleted&#x60; – remove only deleted tokens, requires &#x60;hard_delete&#x60; to be specified.  (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or token isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTokensCall(String collection, String reason, List<String> objectId, List<String> tag, List<String> tokenId, List<String> options, String adhocReason, Boolean reloadCache, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/data/collections/{collection}/tokens"
            .replaceAll("\\{" + "collection" + "\\}", localVarApiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (objectId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "object_id", objectId));
        }

        if (tag != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tag", tag));
        }

        if (tokenId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "token_id", tokenId));
        }

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "options", options));
        }

        if (adhocReason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adhoc_reason", adhocReason));
        }

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        if (reloadCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reload_cache", reloadCache));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTokensValidateBeforeCall(String collection, String reason, List<String> objectId, List<String> tag, List<String> tokenId, List<String> options, String adhocReason, Boolean reloadCache, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling deleteTokens(Async)");
        }
        
        // verify the required parameter 'reason' is set
        if (reason == null) {
            throw new ApiException("Missing the required parameter 'reason' when calling deleteTokens(Async)");
        }
        

        okhttp3.Call localVarCall = deleteTokensCall(collection, reason, objectId, tag, tokenId, options, adhocReason, reloadCache, _callback);
        return localVarCall;

    }

    /**
     * Delete tokens
     * 
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param objectId Comma-separated list of object IDs. (optional)
     * @param tag Comma-separated list of tags. (optional)
     * @param tokenId Comma-separated list of token IDs. (optional)
     * @param options Options for the operation. Options include: - &#x60;hard_delete&#x60; – permanently delete the tokens. - &#x60;deleted&#x60; – remove only deleted tokens, requires &#x60;hard_delete&#x60; to be specified.  (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or token isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTokens(String collection, String reason, List<String> objectId, List<String> tag, List<String> tokenId, List<String> options, String adhocReason, Boolean reloadCache) throws ApiException {
        deleteTokensWithHttpInfo(collection, reason, objectId, tag, tokenId, options, adhocReason, reloadCache);
    }

    /**
     * Delete tokens
     * 
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param objectId Comma-separated list of object IDs. (optional)
     * @param tag Comma-separated list of tags. (optional)
     * @param tokenId Comma-separated list of token IDs. (optional)
     * @param options Options for the operation. Options include: - &#x60;hard_delete&#x60; – permanently delete the tokens. - &#x60;deleted&#x60; – remove only deleted tokens, requires &#x60;hard_delete&#x60; to be specified.  (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or token isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTokensWithHttpInfo(String collection, String reason, List<String> objectId, List<String> tag, List<String> tokenId, List<String> options, String adhocReason, Boolean reloadCache) throws ApiException {
        okhttp3.Call localVarCall = deleteTokensValidateBeforeCall(collection, reason, objectId, tag, tokenId, options, adhocReason, reloadCache, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete tokens (asynchronously)
     * 
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param objectId Comma-separated list of object IDs. (optional)
     * @param tag Comma-separated list of tags. (optional)
     * @param tokenId Comma-separated list of token IDs. (optional)
     * @param options Options for the operation. Options include: - &#x60;hard_delete&#x60; – permanently delete the tokens. - &#x60;deleted&#x60; – remove only deleted tokens, requires &#x60;hard_delete&#x60; to be specified.  (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or token isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTokensAsync(String collection, String reason, List<String> objectId, List<String> tag, List<String> tokenId, List<String> options, String adhocReason, Boolean reloadCache, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTokensValidateBeforeCall(collection, reason, objectId, tag, tokenId, options, adhocReason, reloadCache, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for detokenize
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param objectId Comma-separated list of object IDs. (optional)
     * @param options Comma-separated list of options. (optional)
     * @param tag Comma-separated list of tags. (optional)
     * @param tokenId Comma-separated list of token IDs. (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, properties, referenced objects or token isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detokenizeCall(String collection, String reason, List<String> objectId, List<String> options, List<String> tag, List<String> tokenId, String adhocReason, Boolean reloadCache, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/data/collections/{collection}/tokens"
            .replaceAll("\\{" + "collection" + "\\}", localVarApiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (objectId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "object_id", objectId));
        }

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "options", options));
        }

        if (tag != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tag", tag));
        }

        if (tokenId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "token_id", tokenId));
        }

        if (adhocReason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adhoc_reason", adhocReason));
        }

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        if (reloadCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reload_cache", reloadCache));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detokenizeValidateBeforeCall(String collection, String reason, List<String> objectId, List<String> options, List<String> tag, List<String> tokenId, String adhocReason, Boolean reloadCache, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling detokenize(Async)");
        }
        
        // verify the required parameter 'reason' is set
        if (reason == null) {
            throw new ApiException("Missing the required parameter 'reason' when calling detokenize(Async)");
        }
        

        okhttp3.Call localVarCall = detokenizeCall(collection, reason, objectId, options, tag, tokenId, adhocReason, reloadCache, _callback);
        return localVarCall;

    }

    /**
     * Detokenize tokens
     * 
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param objectId Comma-separated list of object IDs. (optional)
     * @param options Comma-separated list of options. (optional)
     * @param tag Comma-separated list of tags. (optional)
     * @param tokenId Comma-separated list of token IDs. (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @return List&lt;ModelsDetokenizedToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, properties, referenced objects or token isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelsDetokenizedToken> detokenize(String collection, String reason, List<String> objectId, List<String> options, List<String> tag, List<String> tokenId, String adhocReason, Boolean reloadCache) throws ApiException {
        ApiResponse<List<ModelsDetokenizedToken>> localVarResp = detokenizeWithHttpInfo(collection, reason, objectId, options, tag, tokenId, adhocReason, reloadCache);
        return localVarResp.getData();
    }

    /**
     * Detokenize tokens
     * 
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param objectId Comma-separated list of object IDs. (optional)
     * @param options Comma-separated list of options. (optional)
     * @param tag Comma-separated list of tags. (optional)
     * @param tokenId Comma-separated list of token IDs. (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @return ApiResponse&lt;List&lt;ModelsDetokenizedToken&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, properties, referenced objects or token isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelsDetokenizedToken>> detokenizeWithHttpInfo(String collection, String reason, List<String> objectId, List<String> options, List<String> tag, List<String> tokenId, String adhocReason, Boolean reloadCache) throws ApiException {
        okhttp3.Call localVarCall = detokenizeValidateBeforeCall(collection, reason, objectId, options, tag, tokenId, adhocReason, reloadCache, null);
        Type localVarReturnType = new TypeToken<List<ModelsDetokenizedToken>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detokenize tokens (asynchronously)
     * 
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param objectId Comma-separated list of object IDs. (optional)
     * @param options Comma-separated list of options. (optional)
     * @param tag Comma-separated list of tags. (optional)
     * @param tokenId Comma-separated list of token IDs. (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, properties, referenced objects or token isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detokenizeAsync(String collection, String reason, List<String> objectId, List<String> options, List<String> tag, List<String> tokenId, String adhocReason, Boolean reloadCache, final ApiCallback<List<ModelsDetokenizedToken>> _callback) throws ApiException {

        okhttp3.Call localVarCall = detokenizeValidateBeforeCall(collection, reason, objectId, options, tag, tokenId, adhocReason, reloadCache, _callback);
        Type localVarReturnType = new TypeToken<List<ModelsDetokenizedToken>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotateTokens
     * @param tokenId Comma-separated list of token IDs. (required)
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, token, or referenced object or property was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotateTokensCall(List<String> tokenId, String collection, String reason, String adhocReason, Boolean reloadCache, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/data/collections/{collection}/rotate/tokens"
            .replaceAll("\\{" + "collection" + "\\}", localVarApiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tokenId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "token_id", tokenId));
        }

        if (adhocReason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adhoc_reason", adhocReason));
        }

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        if (reloadCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reload_cache", reloadCache));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotateTokensValidateBeforeCall(List<String> tokenId, String collection, String reason, String adhocReason, Boolean reloadCache, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling rotateTokens(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling rotateTokens(Async)");
        }
        
        // verify the required parameter 'reason' is set
        if (reason == null) {
            throw new ApiException("Missing the required parameter 'reason' when calling rotateTokens(Async)");
        }
        

        okhttp3.Call localVarCall = rotateTokensCall(tokenId, collection, reason, adhocReason, reloadCache, _callback);
        return localVarCall;

    }

    /**
     * Rotate tokens
     * 
     * @param tokenId Comma-separated list of token IDs. (required)
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @return List&lt;ModelsRotatedToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, token, or referenced object or property was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelsRotatedToken> rotateTokens(List<String> tokenId, String collection, String reason, String adhocReason, Boolean reloadCache) throws ApiException {
        ApiResponse<List<ModelsRotatedToken>> localVarResp = rotateTokensWithHttpInfo(tokenId, collection, reason, adhocReason, reloadCache);
        return localVarResp.getData();
    }

    /**
     * Rotate tokens
     * 
     * @param tokenId Comma-separated list of token IDs. (required)
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @return ApiResponse&lt;List&lt;ModelsRotatedToken&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, token, or referenced object or property was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelsRotatedToken>> rotateTokensWithHttpInfo(List<String> tokenId, String collection, String reason, String adhocReason, Boolean reloadCache) throws ApiException {
        okhttp3.Call localVarCall = rotateTokensValidateBeforeCall(tokenId, collection, reason, adhocReason, reloadCache, null);
        Type localVarReturnType = new TypeToken<List<ModelsRotatedToken>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rotate tokens (asynchronously)
     * 
     * @param tokenId Comma-separated list of token IDs. (required)
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, token, or referenced object or property was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotateTokensAsync(List<String> tokenId, String collection, String reason, String adhocReason, Boolean reloadCache, final ApiCallback<List<ModelsRotatedToken>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotateTokensValidateBeforeCall(tokenId, collection, reason, adhocReason, reloadCache, _callback);
        Type localVarReturnType = new TypeToken<List<ModelsRotatedToken>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchTokens
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param modelsQueryToken The query. This is a JSON object consisting of query filters. (required)
     * @param options Options for the operation. Options include: - &#x60;deleted&#x60; – get only deleted tokens.  (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, token, or referenced object or property was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchTokensCall(String collection, String reason, ModelsQueryToken modelsQueryToken, List<String> options, String adhocReason, Boolean reloadCache, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelsQueryToken;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/data/collections/{collection}/query/tokens"
            .replaceAll("\\{" + "collection" + "\\}", localVarApiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "options", options));
        }

        if (adhocReason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adhoc_reason", adhocReason));
        }

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        if (reloadCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reload_cache", reloadCache));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchTokensValidateBeforeCall(String collection, String reason, ModelsQueryToken modelsQueryToken, List<String> options, String adhocReason, Boolean reloadCache, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling searchTokens(Async)");
        }
        
        // verify the required parameter 'reason' is set
        if (reason == null) {
            throw new ApiException("Missing the required parameter 'reason' when calling searchTokens(Async)");
        }
        
        // verify the required parameter 'modelsQueryToken' is set
        if (modelsQueryToken == null) {
            throw new ApiException("Missing the required parameter 'modelsQueryToken' when calling searchTokens(Async)");
        }
        

        okhttp3.Call localVarCall = searchTokensCall(collection, reason, modelsQueryToken, options, adhocReason, reloadCache, _callback);
        return localVarCall;

    }

    /**
     * Search tokens
     * 
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param modelsQueryToken The query. This is a JSON object consisting of query filters. (required)
     * @param options Options for the operation. Options include: - &#x60;deleted&#x60; – get only deleted tokens.  (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @return List&lt;ModelsTokenMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, token, or referenced object or property was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelsTokenMetadata> searchTokens(String collection, String reason, ModelsQueryToken modelsQueryToken, List<String> options, String adhocReason, Boolean reloadCache) throws ApiException {
        ApiResponse<List<ModelsTokenMetadata>> localVarResp = searchTokensWithHttpInfo(collection, reason, modelsQueryToken, options, adhocReason, reloadCache);
        return localVarResp.getData();
    }

    /**
     * Search tokens
     * 
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param modelsQueryToken The query. This is a JSON object consisting of query filters. (required)
     * @param options Options for the operation. Options include: - &#x60;deleted&#x60; – get only deleted tokens.  (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @return ApiResponse&lt;List&lt;ModelsTokenMetadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, token, or referenced object or property was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelsTokenMetadata>> searchTokensWithHttpInfo(String collection, String reason, ModelsQueryToken modelsQueryToken, List<String> options, String adhocReason, Boolean reloadCache) throws ApiException {
        okhttp3.Call localVarCall = searchTokensValidateBeforeCall(collection, reason, modelsQueryToken, options, adhocReason, reloadCache, null);
        Type localVarReturnType = new TypeToken<List<ModelsTokenMetadata>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search tokens (asynchronously)
     * 
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param modelsQueryToken The query. This is a JSON object consisting of query filters. (required)
     * @param options Options for the operation. Options include: - &#x60;deleted&#x60; – get only deleted tokens.  (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, token, or referenced object or property was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchTokensAsync(String collection, String reason, ModelsQueryToken modelsQueryToken, List<String> options, String adhocReason, Boolean reloadCache, final ApiCallback<List<ModelsTokenMetadata>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchTokensValidateBeforeCall(collection, reason, modelsQueryToken, options, adhocReason, reloadCache, _callback);
        Type localVarReturnType = new TypeToken<List<ModelsTokenMetadata>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tokenize
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param modelsTokenizeRequest Details of the object and property. (required)
     * @param ttl Token time to live (TTL) in seconds. If not set, the default TTL is used. See the &#x60;PVAULT_TTL_TOKENS&#x60; time to live environment variable. (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, properties or referenced objects isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokenizeCall(String collection, String reason, ModelsTokenizeRequest modelsTokenizeRequest, String ttl, String adhocReason, Boolean reloadCache, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelsTokenizeRequest;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/data/collections/{collection}/tokens"
            .replaceAll("\\{" + "collection" + "\\}", localVarApiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ttl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ttl", ttl));
        }

        if (adhocReason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adhoc_reason", adhocReason));
        }

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        if (reloadCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reload_cache", reloadCache));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokenizeValidateBeforeCall(String collection, String reason, ModelsTokenizeRequest modelsTokenizeRequest, String ttl, String adhocReason, Boolean reloadCache, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling tokenize(Async)");
        }
        
        // verify the required parameter 'reason' is set
        if (reason == null) {
            throw new ApiException("Missing the required parameter 'reason' when calling tokenize(Async)");
        }
        
        // verify the required parameter 'modelsTokenizeRequest' is set
        if (modelsTokenizeRequest == null) {
            throw new ApiException("Missing the required parameter 'modelsTokenizeRequest' when calling tokenize(Async)");
        }
        

        okhttp3.Call localVarCall = tokenizeCall(collection, reason, modelsTokenizeRequest, ttl, adhocReason, reloadCache, _callback);
        return localVarCall;

    }

    /**
     * Tokenize properties of an object data
     * 
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param modelsTokenizeRequest Details of the object and property. (required)
     * @param ttl Token time to live (TTL) in seconds. If not set, the default TTL is used. See the &#x60;PVAULT_TTL_TOKENS&#x60; time to live environment variable. (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @return List&lt;ModelsTokenValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, properties or referenced objects isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelsTokenValue> tokenize(String collection, String reason, ModelsTokenizeRequest modelsTokenizeRequest, String ttl, String adhocReason, Boolean reloadCache) throws ApiException {
        ApiResponse<List<ModelsTokenValue>> localVarResp = tokenizeWithHttpInfo(collection, reason, modelsTokenizeRequest, ttl, adhocReason, reloadCache);
        return localVarResp.getData();
    }

    /**
     * Tokenize properties of an object data
     * 
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param modelsTokenizeRequest Details of the object and property. (required)
     * @param ttl Token time to live (TTL) in seconds. If not set, the default TTL is used. See the &#x60;PVAULT_TTL_TOKENS&#x60; time to live environment variable. (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @return ApiResponse&lt;List&lt;ModelsTokenValue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, properties or referenced objects isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelsTokenValue>> tokenizeWithHttpInfo(String collection, String reason, ModelsTokenizeRequest modelsTokenizeRequest, String ttl, String adhocReason, Boolean reloadCache) throws ApiException {
        okhttp3.Call localVarCall = tokenizeValidateBeforeCall(collection, reason, modelsTokenizeRequest, ttl, adhocReason, reloadCache, null);
        Type localVarReturnType = new TypeToken<List<ModelsTokenValue>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tokenize properties of an object data (asynchronously)
     * 
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param modelsTokenizeRequest Details of the object and property. (required)
     * @param ttl Token time to live (TTL) in seconds. If not set, the default TTL is used. See the &#x60;PVAULT_TTL_TOKENS&#x60; time to live environment variable. (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, properties or referenced objects isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokenizeAsync(String collection, String reason, ModelsTokenizeRequest modelsTokenizeRequest, String ttl, String adhocReason, Boolean reloadCache, final ApiCallback<List<ModelsTokenValue>> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokenizeValidateBeforeCall(collection, reason, modelsTokenizeRequest, ttl, adhocReason, reloadCache, _callback);
        Type localVarReturnType = new TypeToken<List<ModelsTokenValue>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTokens
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param modelsUpdateTokenRequest Update token request details. (required)
     * @param ttl Token time to live (TTL) in seconds. If not set, the token&#39;s expiry date is not changed. (optional)
     * @param objectId Comma-separated list of object IDs. (optional)
     * @param tag Comma-separated list of tags. (optional)
     * @param tokenId Comma-separated list of token IDs. (optional)
     * @param options Options for the operation. Options include: - &#x60;deleted&#x60; – update only deleted tokens.  (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, token, or referenced object or property was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTokensCall(String collection, String reason, ModelsUpdateTokenRequest modelsUpdateTokenRequest, String ttl, List<UUID> objectId, List<String> tag, List<String> tokenId, List<String> options, String adhocReason, Boolean reloadCache, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelsUpdateTokenRequest;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/data/collections/{collection}/tokens"
            .replaceAll("\\{" + "collection" + "\\}", localVarApiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ttl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ttl", ttl));
        }

        if (objectId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "object_id", objectId));
        }

        if (tag != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tag", tag));
        }

        if (tokenId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "token_id", tokenId));
        }

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "options", options));
        }

        if (adhocReason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adhoc_reason", adhocReason));
        }

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        if (reloadCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reload_cache", reloadCache));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTokensValidateBeforeCall(String collection, String reason, ModelsUpdateTokenRequest modelsUpdateTokenRequest, String ttl, List<UUID> objectId, List<String> tag, List<String> tokenId, List<String> options, String adhocReason, Boolean reloadCache, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling updateTokens(Async)");
        }
        
        // verify the required parameter 'reason' is set
        if (reason == null) {
            throw new ApiException("Missing the required parameter 'reason' when calling updateTokens(Async)");
        }
        
        // verify the required parameter 'modelsUpdateTokenRequest' is set
        if (modelsUpdateTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'modelsUpdateTokenRequest' when calling updateTokens(Async)");
        }
        

        okhttp3.Call localVarCall = updateTokensCall(collection, reason, modelsUpdateTokenRequest, ttl, objectId, tag, tokenId, options, adhocReason, reloadCache, _callback);
        return localVarCall;

    }

    /**
     * Update tokens
     * 
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param modelsUpdateTokenRequest Update token request details. (required)
     * @param ttl Token time to live (TTL) in seconds. If not set, the token&#39;s expiry date is not changed. (optional)
     * @param objectId Comma-separated list of object IDs. (optional)
     * @param tag Comma-separated list of tags. (optional)
     * @param tokenId Comma-separated list of token IDs. (optional)
     * @param options Options for the operation. Options include: - &#x60;deleted&#x60; – update only deleted tokens.  (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, token, or referenced object or property was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public void updateTokens(String collection, String reason, ModelsUpdateTokenRequest modelsUpdateTokenRequest, String ttl, List<UUID> objectId, List<String> tag, List<String> tokenId, List<String> options, String adhocReason, Boolean reloadCache) throws ApiException {
        updateTokensWithHttpInfo(collection, reason, modelsUpdateTokenRequest, ttl, objectId, tag, tokenId, options, adhocReason, reloadCache);
    }

    /**
     * Update tokens
     * 
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param modelsUpdateTokenRequest Update token request details. (required)
     * @param ttl Token time to live (TTL) in seconds. If not set, the token&#39;s expiry date is not changed. (optional)
     * @param objectId Comma-separated list of object IDs. (optional)
     * @param tag Comma-separated list of tags. (optional)
     * @param tokenId Comma-separated list of token IDs. (optional)
     * @param options Options for the operation. Options include: - &#x60;deleted&#x60; – update only deleted tokens.  (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, token, or referenced object or property was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateTokensWithHttpInfo(String collection, String reason, ModelsUpdateTokenRequest modelsUpdateTokenRequest, String ttl, List<UUID> objectId, List<String> tag, List<String> tokenId, List<String> options, String adhocReason, Boolean reloadCache) throws ApiException {
        okhttp3.Call localVarCall = updateTokensValidateBeforeCall(collection, reason, modelsUpdateTokenRequest, ttl, objectId, tag, tokenId, options, adhocReason, reloadCache, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update tokens (asynchronously)
     * 
     * @param collection The name of the collection containing the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param modelsUpdateTokenRequest Update token request details. (required)
     * @param ttl Token time to live (TTL) in seconds. If not set, the token&#39;s expiry date is not changed. (optional)
     * @param objectId Comma-separated list of object IDs. (optional)
     * @param tag Comma-separated list of tags. (optional)
     * @param tokenId Comma-separated list of token IDs. (optional)
     * @param options Options for the operation. Options include: - &#x60;deleted&#x60; – update only deleted tokens.  (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, token, or referenced object or property was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTokensAsync(String collection, String reason, ModelsUpdateTokenRequest modelsUpdateTokenRequest, String ttl, List<UUID> objectId, List<String> tag, List<String> tokenId, List<String> options, String adhocReason, Boolean reloadCache, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTokensValidateBeforeCall(collection, reason, modelsUpdateTokenRequest, ttl, objectId, tag, tokenId, options, adhocReason, reloadCache, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
