/*
 * Piiano Vault REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ModelsCollection;
import org.openapitools.client.model.ModelsProperty;
import org.openapitools.client.model.RestHTTPError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CollectionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CollectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CollectionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addCollection
     * @param modelsCollection Details of the collection including its properties. (required)
     * @param format When set to &#x60;pvschema&#x60;, returns the collection in the PVSchema format. Otherwise, returns the JSON format. (optional, default to json)
     * @param options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties from response.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCollectionCall(ModelsCollection modelsCollection, String format, List<String> options, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelsCollection;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/ctl/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "options", options));
        }

        final String[] localVarAccepts = {
            "application/json", "application/pvschema"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/pvschema"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCollectionValidateBeforeCall(ModelsCollection modelsCollection, String format, List<String> options, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelsCollection' is set
        if (modelsCollection == null) {
            throw new ApiException("Missing the required parameter 'modelsCollection' when calling addCollection(Async)");
        }
        

        okhttp3.Call localVarCall = addCollectionCall(modelsCollection, format, options, _callback);
        return localVarCall;

    }

    /**
     * Add collection
     * 
     * @param modelsCollection Details of the collection including its properties. (required)
     * @param format When set to &#x60;pvschema&#x60;, returns the collection in the PVSchema format. Otherwise, returns the JSON format. (optional, default to json)
     * @param options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties from response.  (optional)
     * @return ModelsCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ModelsCollection addCollection(ModelsCollection modelsCollection, String format, List<String> options) throws ApiException {
        ApiResponse<ModelsCollection> localVarResp = addCollectionWithHttpInfo(modelsCollection, format, options);
        return localVarResp.getData();
    }

    /**
     * Add collection
     * 
     * @param modelsCollection Details of the collection including its properties. (required)
     * @param format When set to &#x60;pvschema&#x60;, returns the collection in the PVSchema format. Otherwise, returns the JSON format. (optional, default to json)
     * @param options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties from response.  (optional)
     * @return ApiResponse&lt;ModelsCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsCollection> addCollectionWithHttpInfo(ModelsCollection modelsCollection, String format, List<String> options) throws ApiException {
        okhttp3.Call localVarCall = addCollectionValidateBeforeCall(modelsCollection, format, options, null);
        Type localVarReturnType = new TypeToken<ModelsCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add collection (asynchronously)
     * 
     * @param modelsCollection Details of the collection including its properties. (required)
     * @param format When set to &#x60;pvschema&#x60;, returns the collection in the PVSchema format. Otherwise, returns the JSON format. (optional, default to json)
     * @param options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties from response.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCollectionAsync(ModelsCollection modelsCollection, String format, List<String> options, final ApiCallback<ModelsCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCollectionValidateBeforeCall(modelsCollection, format, options, _callback);
        Type localVarReturnType = new TypeToken<ModelsCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addCollectionProperty
     * @param collection The name of the collection to add the property to. (required)
     * @param property The name of the property to add. (required)
     * @param modelsProperty Details of the property. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCollectionPropertyCall(String collection, String property, ModelsProperty modelsProperty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelsProperty;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/ctl/collections/{collection}/properties/{property}"
            .replaceAll("\\{" + "collection" + "\\}", localVarApiClient.escapeString(collection.toString()))
            .replaceAll("\\{" + "property" + "\\}", localVarApiClient.escapeString(property.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCollectionPropertyValidateBeforeCall(String collection, String property, ModelsProperty modelsProperty, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling addCollectionProperty(Async)");
        }
        
        // verify the required parameter 'property' is set
        if (property == null) {
            throw new ApiException("Missing the required parameter 'property' when calling addCollectionProperty(Async)");
        }
        
        // verify the required parameter 'modelsProperty' is set
        if (modelsProperty == null) {
            throw new ApiException("Missing the required parameter 'modelsProperty' when calling addCollectionProperty(Async)");
        }
        

        okhttp3.Call localVarCall = addCollectionPropertyCall(collection, property, modelsProperty, _callback);
        return localVarCall;

    }

    /**
     * Add collection property
     * 
     * @param collection The name of the collection to add the property to. (required)
     * @param property The name of the property to add. (required)
     * @param modelsProperty Details of the property. (required)
     * @return ModelsProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ModelsProperty addCollectionProperty(String collection, String property, ModelsProperty modelsProperty) throws ApiException {
        ApiResponse<ModelsProperty> localVarResp = addCollectionPropertyWithHttpInfo(collection, property, modelsProperty);
        return localVarResp.getData();
    }

    /**
     * Add collection property
     * 
     * @param collection The name of the collection to add the property to. (required)
     * @param property The name of the property to add. (required)
     * @param modelsProperty Details of the property. (required)
     * @return ApiResponse&lt;ModelsProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsProperty> addCollectionPropertyWithHttpInfo(String collection, String property, ModelsProperty modelsProperty) throws ApiException {
        okhttp3.Call localVarCall = addCollectionPropertyValidateBeforeCall(collection, property, modelsProperty, null);
        Type localVarReturnType = new TypeToken<ModelsProperty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add collection property (asynchronously)
     * 
     * @param collection The name of the collection to add the property to. (required)
     * @param property The name of the property to add. (required)
     * @param modelsProperty Details of the property. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCollectionPropertyAsync(String collection, String property, ModelsProperty modelsProperty, final ApiCallback<ModelsProperty> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCollectionPropertyValidateBeforeCall(collection, property, modelsProperty, _callback);
        Type localVarReturnType = new TypeToken<ModelsProperty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCollection
     * @param collection The name of the collection. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCollectionCall(String collection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/ctl/collections/{collection}"
            .replaceAll("\\{" + "collection" + "\\}", localVarApiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCollectionValidateBeforeCall(String collection, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling deleteCollection(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCollectionCall(collection, _callback);
        return localVarCall;

    }

    /**
     * Delete collection
     * 
     * @param collection The name of the collection. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCollection(String collection) throws ApiException {
        deleteCollectionWithHttpInfo(collection);
    }

    /**
     * Delete collection
     * 
     * @param collection The name of the collection. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCollectionWithHttpInfo(String collection) throws ApiException {
        okhttp3.Call localVarCall = deleteCollectionValidateBeforeCall(collection, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete collection (asynchronously)
     * 
     * @param collection The name of the collection. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCollectionAsync(String collection, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCollectionValidateBeforeCall(collection, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCollectionProperty
     * @param collection The name of the collection containing the property. (required)
     * @param property The name of the property. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or property wasn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCollectionPropertyCall(String collection, String property, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/ctl/collections/{collection}/properties/{property}"
            .replaceAll("\\{" + "collection" + "\\}", localVarApiClient.escapeString(collection.toString()))
            .replaceAll("\\{" + "property" + "\\}", localVarApiClient.escapeString(property.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCollectionPropertyValidateBeforeCall(String collection, String property, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling deleteCollectionProperty(Async)");
        }
        
        // verify the required parameter 'property' is set
        if (property == null) {
            throw new ApiException("Missing the required parameter 'property' when calling deleteCollectionProperty(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCollectionPropertyCall(collection, property, _callback);
        return localVarCall;

    }

    /**
     * Delete collection property
     * 
     * @param collection The name of the collection containing the property. (required)
     * @param property The name of the property. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or property wasn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCollectionProperty(String collection, String property) throws ApiException {
        deleteCollectionPropertyWithHttpInfo(collection, property);
    }

    /**
     * Delete collection property
     * 
     * @param collection The name of the collection containing the property. (required)
     * @param property The name of the property. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or property wasn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCollectionPropertyWithHttpInfo(String collection, String property) throws ApiException {
        okhttp3.Call localVarCall = deleteCollectionPropertyValidateBeforeCall(collection, property, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete collection property (asynchronously)
     * 
     * @param collection The name of the collection containing the property. (required)
     * @param property The name of the property. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or property wasn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCollectionPropertyAsync(String collection, String property, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCollectionPropertyValidateBeforeCall(collection, property, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllCollections
     * @param format When set to &#x60;pvschema&#x60;, returns the collection in the PVSchema format. Otherwise, returns the JSON format. (optional, default to json)
     * @param options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties from response.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCollectionsCall(String format, List<String> options, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/ctl/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "options", options));
        }

        final String[] localVarAccepts = {
            "application/json", "application/pvschema"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllCollectionsValidateBeforeCall(String format, List<String> options, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllCollectionsCall(format, options, _callback);
        return localVarCall;

    }

    /**
     * List collections
     * 
     * @param format When set to &#x60;pvschema&#x60;, returns the collection in the PVSchema format. Otherwise, returns the JSON format. (optional, default to json)
     * @param options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties from response.  (optional)
     * @return List&lt;ModelsCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelsCollection> getAllCollections(String format, List<String> options) throws ApiException {
        ApiResponse<List<ModelsCollection>> localVarResp = getAllCollectionsWithHttpInfo(format, options);
        return localVarResp.getData();
    }

    /**
     * List collections
     * 
     * @param format When set to &#x60;pvschema&#x60;, returns the collection in the PVSchema format. Otherwise, returns the JSON format. (optional, default to json)
     * @param options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties from response.  (optional)
     * @return ApiResponse&lt;List&lt;ModelsCollection&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelsCollection>> getAllCollectionsWithHttpInfo(String format, List<String> options) throws ApiException {
        okhttp3.Call localVarCall = getAllCollectionsValidateBeforeCall(format, options, null);
        Type localVarReturnType = new TypeToken<List<ModelsCollection>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List collections (asynchronously)
     * 
     * @param format When set to &#x60;pvschema&#x60;, returns the collection in the PVSchema format. Otherwise, returns the JSON format. (optional, default to json)
     * @param options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties from response.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCollectionsAsync(String format, List<String> options, final ApiCallback<List<ModelsCollection>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllCollectionsValidateBeforeCall(format, options, _callback);
        Type localVarReturnType = new TypeToken<List<ModelsCollection>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCollection
     * @param collection The name of the collection. (required)
     * @param format When set to &#x60;pvschema&#x60;, returns the collection in the PVSchema format. Otherwise, returns the JSON format. (optional, default to json)
     * @param options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties from response.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionCall(String collection, String format, List<String> options, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/ctl/collections/{collection}"
            .replaceAll("\\{" + "collection" + "\\}", localVarApiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "options", options));
        }

        final String[] localVarAccepts = {
            "application/json", "application/pvschema"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionValidateBeforeCall(String collection, String format, List<String> options, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling getCollection(Async)");
        }
        

        okhttp3.Call localVarCall = getCollectionCall(collection, format, options, _callback);
        return localVarCall;

    }

    /**
     * Get collection details
     * 
     * @param collection The name of the collection. (required)
     * @param format When set to &#x60;pvschema&#x60;, returns the collection in the PVSchema format. Otherwise, returns the JSON format. (optional, default to json)
     * @param options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties from response.  (optional)
     * @return ModelsCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ModelsCollection getCollection(String collection, String format, List<String> options) throws ApiException {
        ApiResponse<ModelsCollection> localVarResp = getCollectionWithHttpInfo(collection, format, options);
        return localVarResp.getData();
    }

    /**
     * Get collection details
     * 
     * @param collection The name of the collection. (required)
     * @param format When set to &#x60;pvschema&#x60;, returns the collection in the PVSchema format. Otherwise, returns the JSON format. (optional, default to json)
     * @param options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties from response.  (optional)
     * @return ApiResponse&lt;ModelsCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsCollection> getCollectionWithHttpInfo(String collection, String format, List<String> options) throws ApiException {
        okhttp3.Call localVarCall = getCollectionValidateBeforeCall(collection, format, options, null);
        Type localVarReturnType = new TypeToken<ModelsCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get collection details (asynchronously)
     * 
     * @param collection The name of the collection. (required)
     * @param format When set to &#x60;pvschema&#x60;, returns the collection in the PVSchema format. Otherwise, returns the JSON format. (optional, default to json)
     * @param options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties from response.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionAsync(String collection, String format, List<String> options, final ApiCallback<ModelsCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionValidateBeforeCall(collection, format, options, _callback);
        Type localVarReturnType = new TypeToken<ModelsCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCollectionProperty
     * @param collection The ID of the collection containing the property. (required)
     * @param property The name of the property. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or property wasn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionPropertyCall(String collection, String property, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/ctl/collections/{collection}/properties/{property}"
            .replaceAll("\\{" + "collection" + "\\}", localVarApiClient.escapeString(collection.toString()))
            .replaceAll("\\{" + "property" + "\\}", localVarApiClient.escapeString(property.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionPropertyValidateBeforeCall(String collection, String property, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling getCollectionProperty(Async)");
        }
        
        // verify the required parameter 'property' is set
        if (property == null) {
            throw new ApiException("Missing the required parameter 'property' when calling getCollectionProperty(Async)");
        }
        

        okhttp3.Call localVarCall = getCollectionPropertyCall(collection, property, _callback);
        return localVarCall;

    }

    /**
     * Get collection property
     * 
     * @param collection The ID of the collection containing the property. (required)
     * @param property The name of the property. (required)
     * @return ModelsProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or property wasn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ModelsProperty getCollectionProperty(String collection, String property) throws ApiException {
        ApiResponse<ModelsProperty> localVarResp = getCollectionPropertyWithHttpInfo(collection, property);
        return localVarResp.getData();
    }

    /**
     * Get collection property
     * 
     * @param collection The ID of the collection containing the property. (required)
     * @param property The name of the property. (required)
     * @return ApiResponse&lt;ModelsProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or property wasn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsProperty> getCollectionPropertyWithHttpInfo(String collection, String property) throws ApiException {
        okhttp3.Call localVarCall = getCollectionPropertyValidateBeforeCall(collection, property, null);
        Type localVarReturnType = new TypeToken<ModelsProperty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get collection property (asynchronously)
     * 
     * @param collection The ID of the collection containing the property. (required)
     * @param property The name of the property. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or property wasn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionPropertyAsync(String collection, String property, final ApiCallback<ModelsProperty> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionPropertyValidateBeforeCall(collection, property, _callback);
        Type localVarReturnType = new TypeToken<ModelsProperty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCollectionProperties
     * @param collection The name of the collection containing the properties. (required)
     * @param options Options for the operation. Options include:  - &#x60;show_builtins&#x60; – show built-in properties from response.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCollectionPropertiesCall(String collection, List<String> options, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/ctl/collections/{collection}/properties"
            .replaceAll("\\{" + "collection" + "\\}", localVarApiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "options", options));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCollectionPropertiesValidateBeforeCall(String collection, List<String> options, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling listCollectionProperties(Async)");
        }
        

        okhttp3.Call localVarCall = listCollectionPropertiesCall(collection, options, _callback);
        return localVarCall;

    }

    /**
     * List collection properties
     * 
     * @param collection The name of the collection containing the properties. (required)
     * @param options Options for the operation. Options include:  - &#x60;show_builtins&#x60; – show built-in properties from response.  (optional)
     * @return List&lt;ModelsProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelsProperty> listCollectionProperties(String collection, List<String> options) throws ApiException {
        ApiResponse<List<ModelsProperty>> localVarResp = listCollectionPropertiesWithHttpInfo(collection, options);
        return localVarResp.getData();
    }

    /**
     * List collection properties
     * 
     * @param collection The name of the collection containing the properties. (required)
     * @param options Options for the operation. Options include:  - &#x60;show_builtins&#x60; – show built-in properties from response.  (optional)
     * @return ApiResponse&lt;List&lt;ModelsProperty&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelsProperty>> listCollectionPropertiesWithHttpInfo(String collection, List<String> options) throws ApiException {
        okhttp3.Call localVarCall = listCollectionPropertiesValidateBeforeCall(collection, options, null);
        Type localVarReturnType = new TypeToken<List<ModelsProperty>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List collection properties (asynchronously)
     * 
     * @param collection The name of the collection containing the properties. (required)
     * @param options Options for the operation. Options include:  - &#x60;show_builtins&#x60; – show built-in properties from response.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCollectionPropertiesAsync(String collection, List<String> options, final ApiCallback<List<ModelsProperty>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCollectionPropertiesValidateBeforeCall(collection, options, _callback);
        Type localVarReturnType = new TypeToken<List<ModelsProperty>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCollection
     * @param collection The name of the collection to import the properties to. (required)
     * @param modelsCollection Details of the collection including its properties. (required)
     * @param format When set to &#x60;pvschema&#x60;, returns the collection in the PVSchema format. Otherwise, returns the JSON format. (optional, default to json)
     * @param options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties from response.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Not implemented. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCollectionCall(String collection, ModelsCollection modelsCollection, String format, List<String> options, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelsCollection;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/ctl/collections/{collection}"
            .replaceAll("\\{" + "collection" + "\\}", localVarApiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "options", options));
        }

        final String[] localVarAccepts = {
            "application/json", "application/pvschema"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/pvschema"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCollectionValidateBeforeCall(String collection, ModelsCollection modelsCollection, String format, List<String> options, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling updateCollection(Async)");
        }
        
        // verify the required parameter 'modelsCollection' is set
        if (modelsCollection == null) {
            throw new ApiException("Missing the required parameter 'modelsCollection' when calling updateCollection(Async)");
        }
        

        okhttp3.Call localVarCall = updateCollectionCall(collection, modelsCollection, format, options, _callback);
        return localVarCall;

    }

    /**
     * Update collection details
     * 
     * @param collection The name of the collection to import the properties to. (required)
     * @param modelsCollection Details of the collection including its properties. (required)
     * @param format When set to &#x60;pvschema&#x60;, returns the collection in the PVSchema format. Otherwise, returns the JSON format. (optional, default to json)
     * @param options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties from response.  (optional)
     * @return ModelsCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Not implemented. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ModelsCollection updateCollection(String collection, ModelsCollection modelsCollection, String format, List<String> options) throws ApiException {
        ApiResponse<ModelsCollection> localVarResp = updateCollectionWithHttpInfo(collection, modelsCollection, format, options);
        return localVarResp.getData();
    }

    /**
     * Update collection details
     * 
     * @param collection The name of the collection to import the properties to. (required)
     * @param modelsCollection Details of the collection including its properties. (required)
     * @param format When set to &#x60;pvschema&#x60;, returns the collection in the PVSchema format. Otherwise, returns the JSON format. (optional, default to json)
     * @param options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties from response.  (optional)
     * @return ApiResponse&lt;ModelsCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Not implemented. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsCollection> updateCollectionWithHttpInfo(String collection, ModelsCollection modelsCollection, String format, List<String> options) throws ApiException {
        okhttp3.Call localVarCall = updateCollectionValidateBeforeCall(collection, modelsCollection, format, options, null);
        Type localVarReturnType = new TypeToken<ModelsCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update collection details (asynchronously)
     * 
     * @param collection The name of the collection to import the properties to. (required)
     * @param modelsCollection Details of the collection including its properties. (required)
     * @param format When set to &#x60;pvschema&#x60;, returns the collection in the PVSchema format. Otherwise, returns the JSON format. (optional, default to json)
     * @param options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties from response.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Not implemented. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCollectionAsync(String collection, ModelsCollection modelsCollection, String format, List<String> options, final ApiCallback<ModelsCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCollectionValidateBeforeCall(collection, modelsCollection, format, options, _callback);
        Type localVarReturnType = new TypeToken<ModelsCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCollectionProperty
     * @param collection The name of the collection containing the property. (required)
     * @param property The name of the property. (required)
     * @param modelsProperty property info (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or property wasn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Not implemented. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCollectionPropertyCall(String collection, String property, ModelsProperty modelsProperty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelsProperty;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/ctl/collections/{collection}/properties/{property}"
            .replaceAll("\\{" + "collection" + "\\}", localVarApiClient.escapeString(collection.toString()))
            .replaceAll("\\{" + "property" + "\\}", localVarApiClient.escapeString(property.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCollectionPropertyValidateBeforeCall(String collection, String property, ModelsProperty modelsProperty, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling updateCollectionProperty(Async)");
        }
        
        // verify the required parameter 'property' is set
        if (property == null) {
            throw new ApiException("Missing the required parameter 'property' when calling updateCollectionProperty(Async)");
        }
        
        // verify the required parameter 'modelsProperty' is set
        if (modelsProperty == null) {
            throw new ApiException("Missing the required parameter 'modelsProperty' when calling updateCollectionProperty(Async)");
        }
        

        okhttp3.Call localVarCall = updateCollectionPropertyCall(collection, property, modelsProperty, _callback);
        return localVarCall;

    }

    /**
     * Update collection property
     * 
     * @param collection The name of the collection containing the property. (required)
     * @param property The name of the property. (required)
     * @param modelsProperty property info (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or property wasn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Not implemented. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public void updateCollectionProperty(String collection, String property, ModelsProperty modelsProperty) throws ApiException {
        updateCollectionPropertyWithHttpInfo(collection, property, modelsProperty);
    }

    /**
     * Update collection property
     * 
     * @param collection The name of the collection containing the property. (required)
     * @param property The name of the property. (required)
     * @param modelsProperty property info (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or property wasn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Not implemented. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCollectionPropertyWithHttpInfo(String collection, String property, ModelsProperty modelsProperty) throws ApiException {
        okhttp3.Call localVarCall = updateCollectionPropertyValidateBeforeCall(collection, property, modelsProperty, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update collection property (asynchronously)
     * 
     * @param collection The name of the collection containing the property. (required)
     * @param property The name of the property. (required)
     * @param modelsProperty property info (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or property wasn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Not implemented. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCollectionPropertyAsync(String collection, String property, ModelsProperty modelsProperty, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCollectionPropertyValidateBeforeCall(collection, property, modelsProperty, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
