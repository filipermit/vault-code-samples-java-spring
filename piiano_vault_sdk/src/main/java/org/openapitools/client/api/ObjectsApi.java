/*
 * Piiano Vault REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ModelsObject;
import org.openapitools.client.model.ModelsObjectFieldsPage;
import org.openapitools.client.model.ModelsObjectID;
import org.openapitools.client.model.ModelsQuery;
import org.openapitools.client.model.RestHTTPError;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ObjectsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addObject
     * @param collection The name of the collection to add the object to. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param requestBody The object details. (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param ttl Object time to live (TTL) in seconds, cannot be set to 0. If not set, the default TTL is used. See the &#x60;PVAULT_TTL_ASSOCIATED_OBJECTS&#x60; and &#x60;PVAULT_TTL_UNASSOCIATED_OBJECTS&#x60; time to live environment variables. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or properties isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addObjectCall(String collection, String reason, Map<String, Object> requestBody, String adhocReason, Boolean reloadCache, String ttl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/data/collections/{collection}/objects"
            .replaceAll("\\{" + "collection" + "\\}", localVarApiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (adhocReason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adhoc_reason", adhocReason));
        }

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        if (reloadCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reload_cache", reloadCache));
        }

        if (ttl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ttl", ttl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addObjectValidateBeforeCall(String collection, String reason, Map<String, Object> requestBody, String adhocReason, Boolean reloadCache, String ttl, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling addObject(Async)");
        }
        
        // verify the required parameter 'reason' is set
        if (reason == null) {
            throw new ApiException("Missing the required parameter 'reason' when calling addObject(Async)");
        }
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling addObject(Async)");
        }
        

        okhttp3.Call localVarCall = addObjectCall(collection, reason, requestBody, adhocReason, reloadCache, ttl, _callback);
        return localVarCall;

    }

    /**
     * Add object
     * 
     * @param collection The name of the collection to add the object to. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param requestBody The object details. (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param ttl Object time to live (TTL) in seconds, cannot be set to 0. If not set, the default TTL is used. See the &#x60;PVAULT_TTL_ASSOCIATED_OBJECTS&#x60; and &#x60;PVAULT_TTL_UNASSOCIATED_OBJECTS&#x60; time to live environment variables. (optional)
     * @return ModelsObjectID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or properties isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ModelsObjectID addObject(String collection, String reason, Map<String, Object> requestBody, String adhocReason, Boolean reloadCache, String ttl) throws ApiException {
        ApiResponse<ModelsObjectID> localVarResp = addObjectWithHttpInfo(collection, reason, requestBody, adhocReason, reloadCache, ttl);
        return localVarResp.getData();
    }

    /**
     * Add object
     * 
     * @param collection The name of the collection to add the object to. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param requestBody The object details. (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param ttl Object time to live (TTL) in seconds, cannot be set to 0. If not set, the default TTL is used. See the &#x60;PVAULT_TTL_ASSOCIATED_OBJECTS&#x60; and &#x60;PVAULT_TTL_UNASSOCIATED_OBJECTS&#x60; time to live environment variables. (optional)
     * @return ApiResponse&lt;ModelsObjectID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or properties isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsObjectID> addObjectWithHttpInfo(String collection, String reason, Map<String, Object> requestBody, String adhocReason, Boolean reloadCache, String ttl) throws ApiException {
        okhttp3.Call localVarCall = addObjectValidateBeforeCall(collection, reason, requestBody, adhocReason, reloadCache, ttl, null);
        Type localVarReturnType = new TypeToken<ModelsObjectID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add object (asynchronously)
     * 
     * @param collection The name of the collection to add the object to. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param requestBody The object details. (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param ttl Object time to live (TTL) in seconds, cannot be set to 0. If not set, the default TTL is used. See the &#x60;PVAULT_TTL_ASSOCIATED_OBJECTS&#x60; and &#x60;PVAULT_TTL_UNASSOCIATED_OBJECTS&#x60; time to live environment variables. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or properties isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addObjectAsync(String collection, String reason, Map<String, Object> requestBody, String adhocReason, Boolean reloadCache, String ttl, final ApiCallback<ModelsObjectID> _callback) throws ApiException {

        okhttp3.Call localVarCall = addObjectValidateBeforeCall(collection, reason, requestBody, adhocReason, reloadCache, ttl, _callback);
        Type localVarReturnType = new TypeToken<ModelsObjectID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteObjectById
     * @param collection The name of the collection containing the object. (required)
     * @param id The ID of the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param options Options for the operation. Options include: - &#x60;hard_delete&#x60; – permanently delete the objects. - &#x60;deleted&#x60; – remove only deleted objects, requires &#x60;hard_delete&#x60; to be specified.  (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or object is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteObjectByIdCall(String collection, List<String> id, String reason, List<String> options, String adhocReason, Boolean reloadCache, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/data/collections/{collection}/objects"
            .replaceAll("\\{" + "collection" + "\\}", localVarApiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "options", options));
        }

        if (adhocReason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adhoc_reason", adhocReason));
        }

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        if (reloadCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reload_cache", reloadCache));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteObjectByIdValidateBeforeCall(String collection, List<String> id, String reason, List<String> options, String adhocReason, Boolean reloadCache, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling deleteObjectById(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteObjectById(Async)");
        }
        
        // verify the required parameter 'reason' is set
        if (reason == null) {
            throw new ApiException("Missing the required parameter 'reason' when calling deleteObjectById(Async)");
        }
        

        okhttp3.Call localVarCall = deleteObjectByIdCall(collection, id, reason, options, adhocReason, reloadCache, _callback);
        return localVarCall;

    }

    /**
     * Delete object
     * 
     * @param collection The name of the collection containing the object. (required)
     * @param id The ID of the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param options Options for the operation. Options include: - &#x60;hard_delete&#x60; – permanently delete the objects. - &#x60;deleted&#x60; – remove only deleted objects, requires &#x60;hard_delete&#x60; to be specified.  (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or object is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteObjectById(String collection, List<String> id, String reason, List<String> options, String adhocReason, Boolean reloadCache) throws ApiException {
        deleteObjectByIdWithHttpInfo(collection, id, reason, options, adhocReason, reloadCache);
    }

    /**
     * Delete object
     * 
     * @param collection The name of the collection containing the object. (required)
     * @param id The ID of the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param options Options for the operation. Options include: - &#x60;hard_delete&#x60; – permanently delete the objects. - &#x60;deleted&#x60; – remove only deleted objects, requires &#x60;hard_delete&#x60; to be specified.  (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or object is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteObjectByIdWithHttpInfo(String collection, List<String> id, String reason, List<String> options, String adhocReason, Boolean reloadCache) throws ApiException {
        okhttp3.Call localVarCall = deleteObjectByIdValidateBeforeCall(collection, id, reason, options, adhocReason, reloadCache, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete object (asynchronously)
     * 
     * @param collection The name of the collection containing the object. (required)
     * @param id The ID of the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param options Options for the operation. Options include: - &#x60;hard_delete&#x60; – permanently delete the objects. - &#x60;deleted&#x60; – remove only deleted objects, requires &#x60;hard_delete&#x60; to be specified.  (optional)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or object is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteObjectByIdAsync(String collection, List<String> id, String reason, List<String> options, String adhocReason, Boolean reloadCache, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteObjectByIdValidateBeforeCall(collection, id, reason, options, adhocReason, reloadCache, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getObjects
     * @param collection The name of the collection containing the objects. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param pageSize The maximum number of items to return in this request. If not specified, the default value is used. The default value is the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60;. The value must not exceed the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60; (optional)
     * @param cursor The cursor represents the state of consecutive queries for the same request parameters. In the first call, the cursor may be omitted or specified as an empty string. In consecutive calls, it should be set to the value of the cursor field of the models.ObjectFieldsPage returned by the previous call. Note: when the &#x60;id&#x60; is specified, paging is not supported. In this case, if the number of &#x60;id&#x60; values specified exceeds the maximum page size, the method returns 400 (BAD REQUEST). (optional)
     * @param id A comma-separated list of object IDs. If not provided, all objects are returned. The number of IDs provided cannot exceed the default page size. (optional)
     * @param options Options for the operation. Options include: - &#x60;unsafe&#x60; – fetch all the properties, cannot be specified with &#x60;props&#x60;. - &#x60;show_builtins&#x60; – show built-in properties, can only be specified with &#x60;unsafe&#x60;. - &#x60;deleted&#x60; – get only deleted objects.  (optional)
     * @param props The list of property names and transformations. To include multiple names and transformation bindings, provide a comma-separated list. For example, &#x60;props&#x3D;first_name,last_name&#x60;. If the &#x60;unsafe&#x60; option is used, must be empty. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, properties or object isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectsCall(String collection, String reason, String adhocReason, Boolean reloadCache, Integer pageSize, String cursor, List<UUID> id, List<String> options, List<String> props, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/data/collections/{collection}/objects"
            .replaceAll("\\{" + "collection" + "\\}", localVarApiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (adhocReason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adhoc_reason", adhocReason));
        }

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        if (reloadCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reload_cache", reloadCache));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "options", options));
        }

        if (props != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "props", props));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectsValidateBeforeCall(String collection, String reason, String adhocReason, Boolean reloadCache, Integer pageSize, String cursor, List<UUID> id, List<String> options, List<String> props, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling getObjects(Async)");
        }
        
        // verify the required parameter 'reason' is set
        if (reason == null) {
            throw new ApiException("Missing the required parameter 'reason' when calling getObjects(Async)");
        }
        

        okhttp3.Call localVarCall = getObjectsCall(collection, reason, adhocReason, reloadCache, pageSize, cursor, id, options, props, _callback);
        return localVarCall;

    }

    /**
     * List objects
     * 
     * @param collection The name of the collection containing the objects. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param pageSize The maximum number of items to return in this request. If not specified, the default value is used. The default value is the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60;. The value must not exceed the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60; (optional)
     * @param cursor The cursor represents the state of consecutive queries for the same request parameters. In the first call, the cursor may be omitted or specified as an empty string. In consecutive calls, it should be set to the value of the cursor field of the models.ObjectFieldsPage returned by the previous call. Note: when the &#x60;id&#x60; is specified, paging is not supported. In this case, if the number of &#x60;id&#x60; values specified exceeds the maximum page size, the method returns 400 (BAD REQUEST). (optional)
     * @param id A comma-separated list of object IDs. If not provided, all objects are returned. The number of IDs provided cannot exceed the default page size. (optional)
     * @param options Options for the operation. Options include: - &#x60;unsafe&#x60; – fetch all the properties, cannot be specified with &#x60;props&#x60;. - &#x60;show_builtins&#x60; – show built-in properties, can only be specified with &#x60;unsafe&#x60;. - &#x60;deleted&#x60; – get only deleted objects.  (optional)
     * @param props The list of property names and transformations. To include multiple names and transformation bindings, provide a comma-separated list. For example, &#x60;props&#x3D;first_name,last_name&#x60;. If the &#x60;unsafe&#x60; option is used, must be empty. (optional)
     * @return ModelsObjectFieldsPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, properties or object isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ModelsObjectFieldsPage getObjects(String collection, String reason, String adhocReason, Boolean reloadCache, Integer pageSize, String cursor, List<UUID> id, List<String> options, List<String> props) throws ApiException {
        ApiResponse<ModelsObjectFieldsPage> localVarResp = getObjectsWithHttpInfo(collection, reason, adhocReason, reloadCache, pageSize, cursor, id, options, props);
        return localVarResp.getData();
    }

    /**
     * List objects
     * 
     * @param collection The name of the collection containing the objects. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param pageSize The maximum number of items to return in this request. If not specified, the default value is used. The default value is the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60;. The value must not exceed the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60; (optional)
     * @param cursor The cursor represents the state of consecutive queries for the same request parameters. In the first call, the cursor may be omitted or specified as an empty string. In consecutive calls, it should be set to the value of the cursor field of the models.ObjectFieldsPage returned by the previous call. Note: when the &#x60;id&#x60; is specified, paging is not supported. In this case, if the number of &#x60;id&#x60; values specified exceeds the maximum page size, the method returns 400 (BAD REQUEST). (optional)
     * @param id A comma-separated list of object IDs. If not provided, all objects are returned. The number of IDs provided cannot exceed the default page size. (optional)
     * @param options Options for the operation. Options include: - &#x60;unsafe&#x60; – fetch all the properties, cannot be specified with &#x60;props&#x60;. - &#x60;show_builtins&#x60; – show built-in properties, can only be specified with &#x60;unsafe&#x60;. - &#x60;deleted&#x60; – get only deleted objects.  (optional)
     * @param props The list of property names and transformations. To include multiple names and transformation bindings, provide a comma-separated list. For example, &#x60;props&#x3D;first_name,last_name&#x60;. If the &#x60;unsafe&#x60; option is used, must be empty. (optional)
     * @return ApiResponse&lt;ModelsObjectFieldsPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, properties or object isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsObjectFieldsPage> getObjectsWithHttpInfo(String collection, String reason, String adhocReason, Boolean reloadCache, Integer pageSize, String cursor, List<UUID> id, List<String> options, List<String> props) throws ApiException {
        okhttp3.Call localVarCall = getObjectsValidateBeforeCall(collection, reason, adhocReason, reloadCache, pageSize, cursor, id, options, props, null);
        Type localVarReturnType = new TypeToken<ModelsObjectFieldsPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List objects (asynchronously)
     * 
     * @param collection The name of the collection containing the objects. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param pageSize The maximum number of items to return in this request. If not specified, the default value is used. The default value is the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60;. The value must not exceed the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60; (optional)
     * @param cursor The cursor represents the state of consecutive queries for the same request parameters. In the first call, the cursor may be omitted or specified as an empty string. In consecutive calls, it should be set to the value of the cursor field of the models.ObjectFieldsPage returned by the previous call. Note: when the &#x60;id&#x60; is specified, paging is not supported. In this case, if the number of &#x60;id&#x60; values specified exceeds the maximum page size, the method returns 400 (BAD REQUEST). (optional)
     * @param id A comma-separated list of object IDs. If not provided, all objects are returned. The number of IDs provided cannot exceed the default page size. (optional)
     * @param options Options for the operation. Options include: - &#x60;unsafe&#x60; – fetch all the properties, cannot be specified with &#x60;props&#x60;. - &#x60;show_builtins&#x60; – show built-in properties, can only be specified with &#x60;unsafe&#x60;. - &#x60;deleted&#x60; – get only deleted objects.  (optional)
     * @param props The list of property names and transformations. To include multiple names and transformation bindings, provide a comma-separated list. For example, &#x60;props&#x3D;first_name,last_name&#x60;. If the &#x60;unsafe&#x60; option is used, must be empty. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, properties or object isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectsAsync(String collection, String reason, String adhocReason, Boolean reloadCache, Integer pageSize, String cursor, List<UUID> id, List<String> options, List<String> props, final ApiCallback<ModelsObjectFieldsPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectsValidateBeforeCall(collection, reason, adhocReason, reloadCache, pageSize, cursor, id, options, props, _callback);
        Type localVarReturnType = new TypeToken<ModelsObjectFieldsPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getObjectsProperty
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param collection The name of the collection containing the objects. (required)
     * @param property The required property. (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param pageSize The maximum number of items to return in this request. If not specified, the default value is used. The default value is the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60;. The value must not exceed the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60; (optional)
     * @param cursor The cursor represents the state of consecutive queries for the same request parameters. In the first call, the cursor may be omitted or specified as an empty string. In consecutive calls, it should be set to the value of the cursor field of the models.ObjectFieldsPage returned by the previous call. Note: when the &#x60;id&#x60; is specified, paging is not supported. In this case, if the number of &#x60;id&#x60; values specified exceeds the maximum page size, the method returns 400 (BAD REQUEST). (optional)
     * @param options Options for the operation. Options include: - &#x60;deleted&#x60; – get only deleted objects.  (optional)
     * @param id The ID of the object. If not given - return all objects (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, properties or object isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectsPropertyCall(String reason, String collection, String property, String adhocReason, Boolean reloadCache, Integer pageSize, String cursor, List<String> options, List<UUID> id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/data/collections/{collection}/properties/{property}"
            .replaceAll("\\{" + "collection" + "\\}", localVarApiClient.escapeString(collection.toString()))
            .replaceAll("\\{" + "property" + "\\}", localVarApiClient.escapeString(property.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (adhocReason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adhoc_reason", adhocReason));
        }

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        if (reloadCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reload_cache", reloadCache));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "options", options));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectsPropertyValidateBeforeCall(String reason, String collection, String property, String adhocReason, Boolean reloadCache, Integer pageSize, String cursor, List<String> options, List<UUID> id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'reason' is set
        if (reason == null) {
            throw new ApiException("Missing the required parameter 'reason' when calling getObjectsProperty(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling getObjectsProperty(Async)");
        }
        
        // verify the required parameter 'property' is set
        if (property == null) {
            throw new ApiException("Missing the required parameter 'property' when calling getObjectsProperty(Async)");
        }
        

        okhttp3.Call localVarCall = getObjectsPropertyCall(reason, collection, property, adhocReason, reloadCache, pageSize, cursor, options, id, _callback);
        return localVarCall;

    }

    /**
     * Get objects property
     * 
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param collection The name of the collection containing the objects. (required)
     * @param property The required property. (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param pageSize The maximum number of items to return in this request. If not specified, the default value is used. The default value is the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60;. The value must not exceed the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60; (optional)
     * @param cursor The cursor represents the state of consecutive queries for the same request parameters. In the first call, the cursor may be omitted or specified as an empty string. In consecutive calls, it should be set to the value of the cursor field of the models.ObjectFieldsPage returned by the previous call. Note: when the &#x60;id&#x60; is specified, paging is not supported. In this case, if the number of &#x60;id&#x60; values specified exceeds the maximum page size, the method returns 400 (BAD REQUEST). (optional)
     * @param options Options for the operation. Options include: - &#x60;deleted&#x60; – get only deleted objects.  (optional)
     * @param id The ID of the object. If not given - return all objects (optional)
     * @return ModelsObjectFieldsPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, properties or object isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ModelsObjectFieldsPage getObjectsProperty(String reason, String collection, String property, String adhocReason, Boolean reloadCache, Integer pageSize, String cursor, List<String> options, List<UUID> id) throws ApiException {
        ApiResponse<ModelsObjectFieldsPage> localVarResp = getObjectsPropertyWithHttpInfo(reason, collection, property, adhocReason, reloadCache, pageSize, cursor, options, id);
        return localVarResp.getData();
    }

    /**
     * Get objects property
     * 
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param collection The name of the collection containing the objects. (required)
     * @param property The required property. (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param pageSize The maximum number of items to return in this request. If not specified, the default value is used. The default value is the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60;. The value must not exceed the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60; (optional)
     * @param cursor The cursor represents the state of consecutive queries for the same request parameters. In the first call, the cursor may be omitted or specified as an empty string. In consecutive calls, it should be set to the value of the cursor field of the models.ObjectFieldsPage returned by the previous call. Note: when the &#x60;id&#x60; is specified, paging is not supported. In this case, if the number of &#x60;id&#x60; values specified exceeds the maximum page size, the method returns 400 (BAD REQUEST). (optional)
     * @param options Options for the operation. Options include: - &#x60;deleted&#x60; – get only deleted objects.  (optional)
     * @param id The ID of the object. If not given - return all objects (optional)
     * @return ApiResponse&lt;ModelsObjectFieldsPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, properties or object isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsObjectFieldsPage> getObjectsPropertyWithHttpInfo(String reason, String collection, String property, String adhocReason, Boolean reloadCache, Integer pageSize, String cursor, List<String> options, List<UUID> id) throws ApiException {
        okhttp3.Call localVarCall = getObjectsPropertyValidateBeforeCall(reason, collection, property, adhocReason, reloadCache, pageSize, cursor, options, id, null);
        Type localVarReturnType = new TypeToken<ModelsObjectFieldsPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get objects property (asynchronously)
     * 
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param collection The name of the collection containing the objects. (required)
     * @param property The required property. (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param pageSize The maximum number of items to return in this request. If not specified, the default value is used. The default value is the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60;. The value must not exceed the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60; (optional)
     * @param cursor The cursor represents the state of consecutive queries for the same request parameters. In the first call, the cursor may be omitted or specified as an empty string. In consecutive calls, it should be set to the value of the cursor field of the models.ObjectFieldsPage returned by the previous call. Note: when the &#x60;id&#x60; is specified, paging is not supported. In this case, if the number of &#x60;id&#x60; values specified exceeds the maximum page size, the method returns 400 (BAD REQUEST). (optional)
     * @param options Options for the operation. Options include: - &#x60;deleted&#x60; – get only deleted objects.  (optional)
     * @param id The ID of the object. If not given - return all objects (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, properties or object isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectsPropertyAsync(String reason, String collection, String property, String adhocReason, Boolean reloadCache, Integer pageSize, String cursor, List<String> options, List<UUID> id, final ApiCallback<ModelsObjectFieldsPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectsPropertyValidateBeforeCall(reason, collection, property, adhocReason, reloadCache, pageSize, cursor, options, id, _callback);
        Type localVarReturnType = new TypeToken<ModelsObjectFieldsPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchObjects
     * @param collection The name of the collection containing the objects. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param modelsQuery The query. This is a JSON object consisting of property keys and match values. For example: &#x60;&#x60;&#x60;json {   \&quot;match\&quot;: {     \&quot;first_name\&quot;: \&quot;John\&quot;,     \&quot;last_name\&quot;: \&quot;Doe\&quot;   } } &#x60;&#x60;&#x60; is the equivalent to: &#x60;&#x60;&#x60;sql where first_name &#x3D; \&quot;John\&quot; AND last_name&#x3D;\&quot;Doe\&quot; &#x60;&#x60;&#x60;  (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param pageSize The maximum number of items to return in this request. If not specified, the default value is used. The default value is the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60;. The value must not exceed the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60; (optional)
     * @param cursor The cursor represents the state of consecutive queries for the same request parameters. In the first call, the cursor may be omitted or specified as an empty string. In consecutive calls, it should be set to the value of the cursor field of the models.ObjectFieldsPage returned by the previous call. Note: when the &#x60;id&#x60; is specified, paging is not supported. In this case, if the number of &#x60;id&#x60; values specified exceeds the maximum page size, the method returns 400 (BAD REQUEST). (optional)
     * @param options Options for the operation. Options include: - &#x60;unsafe&#x60; – fetch all the properties, cannot be specified with &#x60;props&#x60;. - &#x60;show_builtins&#x60; – show built-in properties, can only be specified with &#x60;unsafe&#x60;. - &#x60;deleted&#x60; – get only deleted objects.  (optional)
     * @param props The list of property names and transformations. To include multiple names and transformation bindings, provide a comma-separated list. For example, &#x60;props&#x3D;first_name,last_name&#x60;. If the &#x60;unsafe&#x60; option is used, must be empty. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or properties isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchObjectsCall(String collection, String reason, ModelsQuery modelsQuery, String adhocReason, Boolean reloadCache, Integer pageSize, String cursor, List<String> options, List<String> props, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelsQuery;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/data/collections/{collection}/query/objects"
            .replaceAll("\\{" + "collection" + "\\}", localVarApiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (adhocReason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adhoc_reason", adhocReason));
        }

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        if (reloadCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reload_cache", reloadCache));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "options", options));
        }

        if (props != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "props", props));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchObjectsValidateBeforeCall(String collection, String reason, ModelsQuery modelsQuery, String adhocReason, Boolean reloadCache, Integer pageSize, String cursor, List<String> options, List<String> props, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling searchObjects(Async)");
        }
        
        // verify the required parameter 'reason' is set
        if (reason == null) {
            throw new ApiException("Missing the required parameter 'reason' when calling searchObjects(Async)");
        }
        
        // verify the required parameter 'modelsQuery' is set
        if (modelsQuery == null) {
            throw new ApiException("Missing the required parameter 'modelsQuery' when calling searchObjects(Async)");
        }
        

        okhttp3.Call localVarCall = searchObjectsCall(collection, reason, modelsQuery, adhocReason, reloadCache, pageSize, cursor, options, props, _callback);
        return localVarCall;

    }

    /**
     * Search objects
     * 
     * @param collection The name of the collection containing the objects. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param modelsQuery The query. This is a JSON object consisting of property keys and match values. For example: &#x60;&#x60;&#x60;json {   \&quot;match\&quot;: {     \&quot;first_name\&quot;: \&quot;John\&quot;,     \&quot;last_name\&quot;: \&quot;Doe\&quot;   } } &#x60;&#x60;&#x60; is the equivalent to: &#x60;&#x60;&#x60;sql where first_name &#x3D; \&quot;John\&quot; AND last_name&#x3D;\&quot;Doe\&quot; &#x60;&#x60;&#x60;  (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param pageSize The maximum number of items to return in this request. If not specified, the default value is used. The default value is the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60;. The value must not exceed the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60; (optional)
     * @param cursor The cursor represents the state of consecutive queries for the same request parameters. In the first call, the cursor may be omitted or specified as an empty string. In consecutive calls, it should be set to the value of the cursor field of the models.ObjectFieldsPage returned by the previous call. Note: when the &#x60;id&#x60; is specified, paging is not supported. In this case, if the number of &#x60;id&#x60; values specified exceeds the maximum page size, the method returns 400 (BAD REQUEST). (optional)
     * @param options Options for the operation. Options include: - &#x60;unsafe&#x60; – fetch all the properties, cannot be specified with &#x60;props&#x60;. - &#x60;show_builtins&#x60; – show built-in properties, can only be specified with &#x60;unsafe&#x60;. - &#x60;deleted&#x60; – get only deleted objects.  (optional)
     * @param props The list of property names and transformations. To include multiple names and transformation bindings, provide a comma-separated list. For example, &#x60;props&#x3D;first_name,last_name&#x60;. If the &#x60;unsafe&#x60; option is used, must be empty. (optional)
     * @return ModelsObjectFieldsPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or properties isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ModelsObjectFieldsPage searchObjects(String collection, String reason, ModelsQuery modelsQuery, String adhocReason, Boolean reloadCache, Integer pageSize, String cursor, List<String> options, List<String> props) throws ApiException {
        ApiResponse<ModelsObjectFieldsPage> localVarResp = searchObjectsWithHttpInfo(collection, reason, modelsQuery, adhocReason, reloadCache, pageSize, cursor, options, props);
        return localVarResp.getData();
    }

    /**
     * Search objects
     * 
     * @param collection The name of the collection containing the objects. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param modelsQuery The query. This is a JSON object consisting of property keys and match values. For example: &#x60;&#x60;&#x60;json {   \&quot;match\&quot;: {     \&quot;first_name\&quot;: \&quot;John\&quot;,     \&quot;last_name\&quot;: \&quot;Doe\&quot;   } } &#x60;&#x60;&#x60; is the equivalent to: &#x60;&#x60;&#x60;sql where first_name &#x3D; \&quot;John\&quot; AND last_name&#x3D;\&quot;Doe\&quot; &#x60;&#x60;&#x60;  (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param pageSize The maximum number of items to return in this request. If not specified, the default value is used. The default value is the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60;. The value must not exceed the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60; (optional)
     * @param cursor The cursor represents the state of consecutive queries for the same request parameters. In the first call, the cursor may be omitted or specified as an empty string. In consecutive calls, it should be set to the value of the cursor field of the models.ObjectFieldsPage returned by the previous call. Note: when the &#x60;id&#x60; is specified, paging is not supported. In this case, if the number of &#x60;id&#x60; values specified exceeds the maximum page size, the method returns 400 (BAD REQUEST). (optional)
     * @param options Options for the operation. Options include: - &#x60;unsafe&#x60; – fetch all the properties, cannot be specified with &#x60;props&#x60;. - &#x60;show_builtins&#x60; – show built-in properties, can only be specified with &#x60;unsafe&#x60;. - &#x60;deleted&#x60; – get only deleted objects.  (optional)
     * @param props The list of property names and transformations. To include multiple names and transformation bindings, provide a comma-separated list. For example, &#x60;props&#x3D;first_name,last_name&#x60;. If the &#x60;unsafe&#x60; option is used, must be empty. (optional)
     * @return ApiResponse&lt;ModelsObjectFieldsPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or properties isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsObjectFieldsPage> searchObjectsWithHttpInfo(String collection, String reason, ModelsQuery modelsQuery, String adhocReason, Boolean reloadCache, Integer pageSize, String cursor, List<String> options, List<String> props) throws ApiException {
        okhttp3.Call localVarCall = searchObjectsValidateBeforeCall(collection, reason, modelsQuery, adhocReason, reloadCache, pageSize, cursor, options, props, null);
        Type localVarReturnType = new TypeToken<ModelsObjectFieldsPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search objects (asynchronously)
     * 
     * @param collection The name of the collection containing the objects. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param modelsQuery The query. This is a JSON object consisting of property keys and match values. For example: &#x60;&#x60;&#x60;json {   \&quot;match\&quot;: {     \&quot;first_name\&quot;: \&quot;John\&quot;,     \&quot;last_name\&quot;: \&quot;Doe\&quot;   } } &#x60;&#x60;&#x60; is the equivalent to: &#x60;&#x60;&#x60;sql where first_name &#x3D; \&quot;John\&quot; AND last_name&#x3D;\&quot;Doe\&quot; &#x60;&#x60;&#x60;  (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param pageSize The maximum number of items to return in this request. If not specified, the default value is used. The default value is the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60;. The value must not exceed the value specified in the environment variable &#x60;PVAULT_SERVICE_DEFAULT_PAGE_SIZE&#x60; (optional)
     * @param cursor The cursor represents the state of consecutive queries for the same request parameters. In the first call, the cursor may be omitted or specified as an empty string. In consecutive calls, it should be set to the value of the cursor field of the models.ObjectFieldsPage returned by the previous call. Note: when the &#x60;id&#x60; is specified, paging is not supported. In this case, if the number of &#x60;id&#x60; values specified exceeds the maximum page size, the method returns 400 (BAD REQUEST). (optional)
     * @param options Options for the operation. Options include: - &#x60;unsafe&#x60; – fetch all the properties, cannot be specified with &#x60;props&#x60;. - &#x60;show_builtins&#x60; – show built-in properties, can only be specified with &#x60;unsafe&#x60;. - &#x60;deleted&#x60; – get only deleted objects.  (optional)
     * @param props The list of property names and transformations. To include multiple names and transformation bindings, provide a comma-separated list. For example, &#x60;props&#x3D;first_name,last_name&#x60;. If the &#x60;unsafe&#x60; option is used, must be empty. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection or properties isn&#39;t found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchObjectsAsync(String collection, String reason, ModelsQuery modelsQuery, String adhocReason, Boolean reloadCache, Integer pageSize, String cursor, List<String> options, List<String> props, final ApiCallback<ModelsObjectFieldsPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchObjectsValidateBeforeCall(collection, reason, modelsQuery, adhocReason, reloadCache, pageSize, cursor, options, props, _callback);
        Type localVarReturnType = new TypeToken<ModelsObjectFieldsPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateObjectById
     * @param collection The name of the collection containing the object. (required)
     * @param id The ID of the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param requestBody The object properties to update. (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param ttl Object time to live (TTL) in seconds. If not set, the default TTL is used. See the &#x60;PVAULT_TTL_ASSOCIATED_OBJECTS&#x60; and &#x60;PVAULT_TTL_UNASSOCIATED_OBJECTS&#x60; time to live environment variables. (optional)
     * @param options Options for the operation. Options include: - &#x60;deleted&#x60; – update only deleted objects.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, properties, or object is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateObjectByIdCall(String collection, List<UUID> id, String reason, Map<String, Object> requestBody, String adhocReason, Boolean reloadCache, String ttl, List<String> options, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/data/collections/{collection}/objects"
            .replaceAll("\\{" + "collection" + "\\}", localVarApiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (adhocReason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adhoc_reason", adhocReason));
        }

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        if (reloadCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reload_cache", reloadCache));
        }

        if (ttl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ttl", ttl));
        }

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "options", options));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateObjectByIdValidateBeforeCall(String collection, List<UUID> id, String reason, Map<String, Object> requestBody, String adhocReason, Boolean reloadCache, String ttl, List<String> options, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling updateObjectById(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateObjectById(Async)");
        }
        
        // verify the required parameter 'reason' is set
        if (reason == null) {
            throw new ApiException("Missing the required parameter 'reason' when calling updateObjectById(Async)");
        }
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updateObjectById(Async)");
        }
        

        okhttp3.Call localVarCall = updateObjectByIdCall(collection, id, reason, requestBody, adhocReason, reloadCache, ttl, options, _callback);
        return localVarCall;

    }

    /**
     * Update object
     * 
     * @param collection The name of the collection containing the object. (required)
     * @param id The ID of the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param requestBody The object properties to update. (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param ttl Object time to live (TTL) in seconds. If not set, the default TTL is used. See the &#x60;PVAULT_TTL_ASSOCIATED_OBJECTS&#x60; and &#x60;PVAULT_TTL_UNASSOCIATED_OBJECTS&#x60; time to live environment variables. (optional)
     * @param options Options for the operation. Options include: - &#x60;deleted&#x60; – update only deleted objects.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, properties, or object is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public void updateObjectById(String collection, List<UUID> id, String reason, Map<String, Object> requestBody, String adhocReason, Boolean reloadCache, String ttl, List<String> options) throws ApiException {
        updateObjectByIdWithHttpInfo(collection, id, reason, requestBody, adhocReason, reloadCache, ttl, options);
    }

    /**
     * Update object
     * 
     * @param collection The name of the collection containing the object. (required)
     * @param id The ID of the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param requestBody The object properties to update. (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param ttl Object time to live (TTL) in seconds. If not set, the default TTL is used. See the &#x60;PVAULT_TTL_ASSOCIATED_OBJECTS&#x60; and &#x60;PVAULT_TTL_UNASSOCIATED_OBJECTS&#x60; time to live environment variables. (optional)
     * @param options Options for the operation. Options include: - &#x60;deleted&#x60; – update only deleted objects.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, properties, or object is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateObjectByIdWithHttpInfo(String collection, List<UUID> id, String reason, Map<String, Object> requestBody, String adhocReason, Boolean reloadCache, String ttl, List<String> options) throws ApiException {
        okhttp3.Call localVarCall = updateObjectByIdValidateBeforeCall(collection, id, reason, requestBody, adhocReason, reloadCache, ttl, options, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update object (asynchronously)
     * 
     * @param collection The name of the collection containing the object. (required)
     * @param id The ID of the object. (required)
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param requestBody The object properties to update. (required)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param ttl Object time to live (TTL) in seconds. If not set, the default TTL is used. See the &#x60;PVAULT_TTL_ASSOCIATED_OBJECTS&#x60; and &#x60;PVAULT_TTL_UNASSOCIATED_OBJECTS&#x60; time to live environment variables. (optional)
     * @param options Options for the operation. Options include: - &#x60;deleted&#x60; – update only deleted objects.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The collection, properties, or object is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateObjectByIdAsync(String collection, List<UUID> id, String reason, Map<String, Object> requestBody, String adhocReason, Boolean reloadCache, String ttl, List<String> options, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateObjectByIdValidateBeforeCall(collection, id, reason, requestBody, adhocReason, reloadCache, ttl, options, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
