/*
 * Piiano Vault REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConfigConfig;
import org.openapitools.client.model.GcDeletionCount;
import org.openapitools.client.model.ModelsAllGenerations;
import org.openapitools.client.model.ModelsHealth;
import org.openapitools.client.model.ModelsKMSStatus;
import org.openapitools.client.model.ModelsLicense;
import org.openapitools.client.model.ModelsProductVersion;
import org.openapitools.client.model.RestHTTPError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SystemApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SystemApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SystemApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for controlHealth
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controlHealthCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/ctl/info/health";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call controlHealthValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = controlHealthCall(_callback);
        return localVarCall;

    }

    /**
     * Get control service status
     * 
     * @return ModelsHealth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ModelsHealth controlHealth() throws ApiException {
        ApiResponse<ModelsHealth> localVarResp = controlHealthWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get control service status
     * 
     * @return ApiResponse&lt;ModelsHealth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsHealth> controlHealthWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = controlHealthValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ModelsHealth>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get control service status (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controlHealthAsync(final ApiCallback<ModelsHealth> _callback) throws ApiException {

        okhttp3.Call localVarCall = controlHealthValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ModelsHealth>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataHealth
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataHealthCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/data/info/health";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataHealthValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dataHealthCall(_callback);
        return localVarCall;

    }

    /**
     * Get data service status
     * 
     * @return ModelsHealth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ModelsHealth dataHealth() throws ApiException {
        ApiResponse<ModelsHealth> localVarResp = dataHealthWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get data service status
     * 
     * @return ApiResponse&lt;ModelsHealth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsHealth> dataHealthWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dataHealthValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ModelsHealth>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get data service status (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataHealthAsync(final ApiCallback<ModelsHealth> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataHealthValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ModelsHealth>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for garbageCollection
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param filter Filter for the GC operation. Options include: &#x60;objects_only&#x60;,&#x60;tokens_only&#x60;. (optional, default to all)
     * @param dryRun Runs dry run GC if set to true. (optional, default to false)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call garbageCollectionCall(String reason, String filter, Boolean dryRun, String adhocReason, Boolean reloadCache, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/system/admin/lifecycle/gc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (dryRun != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dry_run", dryRun));
        }

        if (adhocReason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adhoc_reason", adhocReason));
        }

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        if (reloadCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reload_cache", reloadCache));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call garbageCollectionValidateBeforeCall(String reason, String filter, Boolean dryRun, String adhocReason, Boolean reloadCache, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'reason' is set
        if (reason == null) {
            throw new ApiException("Missing the required parameter 'reason' when calling garbageCollection(Async)");
        }
        

        okhttp3.Call localVarCall = garbageCollectionCall(reason, filter, dryRun, adhocReason, reloadCache, _callback);
        return localVarCall;

    }

    /**
     * Purge expired and soft deleted objects and tokens
     * 
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param filter Filter for the GC operation. Options include: &#x60;objects_only&#x60;,&#x60;tokens_only&#x60;. (optional, default to all)
     * @param dryRun Runs dry run GC if set to true. (optional, default to false)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @return List&lt;GcDeletionCount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public List<GcDeletionCount> garbageCollection(String reason, String filter, Boolean dryRun, String adhocReason, Boolean reloadCache) throws ApiException {
        ApiResponse<List<GcDeletionCount>> localVarResp = garbageCollectionWithHttpInfo(reason, filter, dryRun, adhocReason, reloadCache);
        return localVarResp.getData();
    }

    /**
     * Purge expired and soft deleted objects and tokens
     * 
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param filter Filter for the GC operation. Options include: &#x60;objects_only&#x60;,&#x60;tokens_only&#x60;. (optional, default to all)
     * @param dryRun Runs dry run GC if set to true. (optional, default to false)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @return ApiResponse&lt;List&lt;GcDeletionCount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GcDeletionCount>> garbageCollectionWithHttpInfo(String reason, String filter, Boolean dryRun, String adhocReason, Boolean reloadCache) throws ApiException {
        okhttp3.Call localVarCall = garbageCollectionValidateBeforeCall(reason, filter, dryRun, adhocReason, reloadCache, null);
        Type localVarReturnType = new TypeToken<List<GcDeletionCount>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Purge expired and soft deleted objects and tokens (asynchronously)
     * 
     * @param reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false. (required)
     * @param filter Filter for the GC operation. Options include: &#x60;objects_only&#x60;,&#x60;tokens_only&#x60;. (optional, default to all)
     * @param dryRun Runs dry run GC if set to true. (optional, default to false)
     * @param adhocReason An ad-hoc reason for accessing the Vault data. (optional)
     * @param reloadCache Reloads the cache before the action. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call garbageCollectionAsync(String reason, String filter, Boolean dryRun, String adhocReason, Boolean reloadCache, final ApiCallback<List<GcDeletionCount>> _callback) throws ApiException {

        okhttp3.Call localVarCall = garbageCollectionValidateBeforeCall(reason, filter, dryRun, adhocReason, reloadCache, _callback);
        Type localVarReturnType = new TypeToken<List<GcDeletionCount>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClusterInfo
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClusterInfoCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/ctl/info/cluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClusterInfoValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getClusterInfoCall(_callback);
        return localVarCall;

    }

    /**
     * Get cluster information
     * 
     * @return ModelsAllGenerations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ModelsAllGenerations getClusterInfo() throws ApiException {
        ApiResponse<ModelsAllGenerations> localVarResp = getClusterInfoWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get cluster information
     * 
     * @return ApiResponse&lt;ModelsAllGenerations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsAllGenerations> getClusterInfoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getClusterInfoValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ModelsAllGenerations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get cluster information (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClusterInfoAsync(final ApiCallback<ModelsAllGenerations> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClusterInfoValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ModelsAllGenerations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConfiguration
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigurationCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/system/info/configuration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/toml", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigurationValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getConfigurationCall(_callback);
        return localVarCall;

    }

    /**
     * Get system configuration
     * 
     * @return ConfigConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ConfigConfig getConfiguration() throws ApiException {
        ApiResponse<ConfigConfig> localVarResp = getConfigurationWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get system configuration
     * 
     * @return ApiResponse&lt;ConfigConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigConfig> getConfigurationWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getConfigurationValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ConfigConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get system configuration (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigurationAsync(final ApiCallback<ConfigConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigurationValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ConfigConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getKms
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKmsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/system/info/kms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKmsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getKmsCall(_callback);
        return localVarCall;

    }

    /**
     * Get KMS status
     * 
     * @return ModelsKMSStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ModelsKMSStatus getKms() throws ApiException {
        ApiResponse<ModelsKMSStatus> localVarResp = getKmsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get KMS status
     * 
     * @return ApiResponse&lt;ModelsKMSStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsKMSStatus> getKmsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getKmsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ModelsKMSStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get KMS status (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKmsAsync(final ApiCallback<ModelsKMSStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKmsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ModelsKMSStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLicense
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLicenseCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/system/info/license";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLicenseValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getLicenseCall(_callback);
        return localVarCall;

    }

    /**
     * Get license
     * 
     * @return ModelsLicense
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ModelsLicense getLicense() throws ApiException {
        ApiResponse<ModelsLicense> localVarResp = getLicenseWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get license
     * 
     * @return ApiResponse&lt;ModelsLicense&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsLicense> getLicenseWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getLicenseValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ModelsLicense>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get license (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLicenseAsync(final ApiCallback<ModelsLicense> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLicenseValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ModelsLicense>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVaultVersion
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVaultVersionCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/system/info/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVaultVersionValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getVaultVersionCall(_callback);
        return localVarCall;

    }

    /**
     * Get Vault version
     * 
     * @return ModelsProductVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ModelsProductVersion getVaultVersion() throws ApiException {
        ApiResponse<ModelsProductVersion> localVarResp = getVaultVersionWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Vault version
     * 
     * @return ApiResponse&lt;ModelsProductVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsProductVersion> getVaultVersionWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getVaultVersionValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ModelsProductVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Vault version (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVaultVersionAsync(final ApiCallback<ModelsProductVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVaultVersionValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ModelsProductVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotateKeys
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotateKeysCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/system/admin/keys/rotate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotateKeysValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = rotateKeysCall(_callback);
        return localVarCall;

    }

    /**
     * Rotate data encryption keys
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public void rotateKeys() throws ApiException {
        rotateKeysWithHttpInfo();
    }

    /**
     * Rotate data encryption keys
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rotateKeysWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = rotateKeysValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Rotate data encryption keys (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The caller doesn&#39;t have the required access rights. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotateKeysAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotateKeysValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for triggerError
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggerErrorCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvlt/1.0/system/debug/error/trigger";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggerErrorValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = triggerErrorCall(_callback);
        return localVarCall;

    }

    /**
     * Trigger an artificial error
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public void triggerError() throws ApiException {
        triggerErrorWithHttpInfo();
    }

    /**
     * Trigger an artificial error
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> triggerErrorWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = triggerErrorValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Trigger an artificial error (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource is not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on the server. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service is unavailable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggerErrorAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggerErrorValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
