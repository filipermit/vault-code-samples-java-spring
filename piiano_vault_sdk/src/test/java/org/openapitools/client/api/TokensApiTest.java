/*
 * Piiano Vault REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ModelsDetokenizedToken;
import org.openapitools.client.model.ModelsQueryToken;
import org.openapitools.client.model.ModelsRotatedToken;
import org.openapitools.client.model.ModelsTokenMetadata;
import org.openapitools.client.model.ModelsTokenValue;
import org.openapitools.client.model.ModelsTokenizeRequest;
import org.openapitools.client.model.ModelsUpdateTokenRequest;
import org.openapitools.client.model.RestHTTPError;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TokensApi
 */
@Disabled
public class TokensApiTest {

    private final TokensApi api = new TokensApi();

    /**
     * Delete tokens
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTokensTest() throws ApiException {
        String collection = null;
        String reason = null;
        List<String> objectId = null;
        List<String> tag = null;
        List<String> tokenId = null;
        List<String> options = null;
        String adhocReason = null;
        Boolean reloadCache = null;
        api.deleteTokens(collection, reason, objectId, tag, tokenId, options, adhocReason, reloadCache);
        // TODO: test validations
    }

    /**
     * Detokenize tokens
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detokenizeTest() throws ApiException {
        String collection = null;
        String reason = null;
        List<String> objectId = null;
        List<String> options = null;
        List<String> tag = null;
        List<String> tokenId = null;
        String adhocReason = null;
        Boolean reloadCache = null;
        List<ModelsDetokenizedToken> response = api.detokenize(collection, reason, objectId, options, tag, tokenId, adhocReason, reloadCache);
        // TODO: test validations
    }

    /**
     * Rotate tokens
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rotateTokensTest() throws ApiException {
        List<String> tokenId = null;
        String collection = null;
        String reason = null;
        String adhocReason = null;
        Boolean reloadCache = null;
        List<ModelsRotatedToken> response = api.rotateTokens(tokenId, collection, reason, adhocReason, reloadCache);
        // TODO: test validations
    }

    /**
     * Search tokens
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchTokensTest() throws ApiException {
        String collection = null;
        String reason = null;
        ModelsQueryToken modelsQueryToken = null;
        List<String> options = null;
        String adhocReason = null;
        Boolean reloadCache = null;
        List<ModelsTokenMetadata> response = api.searchTokens(collection, reason, modelsQueryToken, options, adhocReason, reloadCache);
        // TODO: test validations
    }

    /**
     * Tokenize properties of an object data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tokenizeTest() throws ApiException {
        String collection = null;
        String reason = null;
        ModelsTokenizeRequest modelsTokenizeRequest = null;
        String ttl = null;
        String adhocReason = null;
        Boolean reloadCache = null;
        List<ModelsTokenValue> response = api.tokenize(collection, reason, modelsTokenizeRequest, ttl, adhocReason, reloadCache);
        // TODO: test validations
    }

    /**
     * Update tokens
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTokensTest() throws ApiException {
        String collection = null;
        String reason = null;
        ModelsUpdateTokenRequest modelsUpdateTokenRequest = null;
        String ttl = null;
        List<UUID> objectId = null;
        List<String> tag = null;
        List<String> tokenId = null;
        List<String> options = null;
        String adhocReason = null;
        Boolean reloadCache = null;
        api.updateTokens(collection, reason, modelsUpdateTokenRequest, ttl, objectId, tag, tokenId, options, adhocReason, reloadCache);
        // TODO: test validations
    }

}
